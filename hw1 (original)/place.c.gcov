        -:    0:Source:SRC/place.c
        -:    0:Graph:OBJ/place.gcno
        -:    0:Data:OBJ/place.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*#include <stdlib.h> */
        -:    2:#include <stdio.h>
        -:    3:#include <math.h>
        -:    4:#include <assert.h>
        -:    5:#include "util.h"
        -:    6:#include "vpr_types.h"
        -:    7:#include "globals.h"
        -:    8:#include "mst.h"
        -:    9:#include "place.h"
        -:   10:#include "read_place.h"
        -:   11:#include "draw.h"
        -:   12:#include "place_and_route.h"
        -:   13:#include "net_delay.h"
        -:   14:#include "path_delay.h"
        -:   15:#include "timing_place_lookup.h"
        -:   16:#include "timing_place.h"
        -:   17:#include "place_stats.h"
        -:   18:
        -:   19:/************** Types and defines local to place.c ***************************/
        -:   20:
        -:   21:#define SMALL_NET 4		/* Cut off for incremental bounding box updates. */
        -:   22:/* 4 is fastest -- I checked.                    */
        -:   23:
        -:   24:
        -:   25:/* For comp_cost.  NORMAL means use the method that generates updateable  *
        -:   26: * bounding boxes for speed.  CHECK means compute all bounding boxes from *
        -:   27: * scratch using a very simple routine to allow checks of the other       *
        -:   28: * costs.                                                                 */
        -:   29:
        -:   30:enum cost_methods
        -:   31:{ NORMAL, CHECK };
        -:   32:
        -:   33:#define FROM 0			/* What block connected to a net has moved? */
        -:   34:#define TO 1
        -:   35:#define FROM_AND_TO 2
        -:   36:
        -:   37:#define ERROR_TOL .0025
        -:   38:#define MAX_MOVES_BEFORE_RECOMPUTE 50000
        -:   39:
        -:   40:/********************** Variables local to place.c ***************************/
        -:   41:
        -:   42:/* [0..num_nets-1]  0 if net never connects to the same block more than  *
        -:   43: *  once, otherwise it gives the number of duplicate connections.        */
        -:   44:
        -:   45:static int *duplicate_pins;
        -:   46:
        -:   47:/* [0..num_nets-1][0..num_unique_blocks-1]  Contains a list of blocks with *
        -:   48: * no duplicated blocks for ONLY those nets that had duplicates.           */
        -:   49:
        -:   50:static int **unique_pin_list;
        -:   51:
        -:   52:/* Cost of a net, and a temporary cost of a net used during move assessment. */
        -:   53:
        -:   54:static float *net_cost = NULL, *temp_net_cost = NULL;	/* [0..num_nets-1] */
        -:   55:
        -:   56:/* [0..num_nets-1][1..num_pins-1]. What is the value of the timing   */
        -:   57:/* driven portion of the cost function. These arrays will be set to  */
        -:   58:/* (criticality * delay) for each point to point connection. */
        -:   59:static float **point_to_point_timing_cost = NULL;
        -:   60:static float **temp_point_to_point_timing_cost = NULL;
        -:   61:
        -:   62:
        -:   63:
        -:   64:/* [0..num_nets-1][1..num_pins-1]. What is the value of the delay */
        -:   65:/* for each connection in the circuit */
        -:   66:static float **point_to_point_delay_cost = NULL;
        -:   67:static float **temp_point_to_point_delay_cost = NULL;
        -:   68:
        -:   69:
        -:   70:/* [0..num_blocks-1][0..pins_per_clb-1]. Indicates which pin on the net */
        -:   71:/* this block corresponds to, this is only required during timing-driven */
        -:   72:/* placement. It is used to allow us to update individual connections on */
        -:   73:/* each net */
        -:   74:static int **net_pin_index = NULL;
        -:   75:
        -:   76:
        -:   77:/* [0..num_nets-1].  Store the bounding box coordinates and the number of    *
        -:   78: * blocks on each of a net's bounding box (to allow efficient updates),      *
        -:   79: * respectively.                                                             */
        -:   80:
        -:   81:static struct s_bb *bb_coords = NULL, *bb_num_on_edges = NULL;
        -:   82:
        -:   83:/* Stores the maximum and expected occupancies, plus the cost, of each   *
        -:   84: * region in the placement.  Used only by the NONLINEAR_CONG cost        *
        -:   85: * function.  [0..num_region-1][0..num_region-1].  Place_region_x and    *
        -:   86: * y give the situation for the x and y directed channels, respectively. */
        -:   87:
        -:   88:static struct s_place_region **place_region_x, **place_region_y;
        -:   89:
        -:   90:/* Used only with nonlinear congestion.  [0..num_regions].            */
        -:   91:
        -:   92:static float *place_region_bounds_x, *place_region_bounds_y;
        -:   93:
        -:   94:/* The arrays below are used to precompute the inverse of the average   *
        -:   95: * number of tracks per channel between [subhigh] and [sublow].  Access *
        -:   96: * them as chan?_place_cost_fac[subhigh][sublow].  They are used to     *
        -:   97: * speed up the computation of the cost function that takes the length  *
        -:   98: * of the net bounding box in each dimension, divided by the average    *
        -:   99: * number of tracks in that direction; for other cost functions they    *
        -:  100: * will never be used.                                                  */
        -:  101:
        -:  102:static float **chanx_place_cost_fac, **chany_place_cost_fac;
        -:  103:
        -:  104:
        -:  105:/* Expected crossing counts for nets with different #'s of pins.  From *
        -:  106: * ICCAD 94 pp. 690 - 695 (with linear interpolation applied by me).   */
        -:  107:
        -:  108:static const float cross_count[50] = {	/* [0..49] */
        -:  109:    1.0, 1.0, 1.0, 1.0828, 1.1536, 1.2206, 1.2823, 1.3385, 1.3991, 1.4493,
        -:  110:    1.4974, 1.5455, 1.5937, 1.6418, 1.6899, 1.7304, 1.7709, 1.8114, 1.8519,
        -:  111:    1.8924,
        -:  112:    1.9288, 1.9652, 2.0015, 2.0379, 2.0743, 2.1061, 2.1379, 2.1698, 2.2016,
        -:  113:    2.2334,
        -:  114:    2.2646, 2.2958, 2.3271, 2.3583, 2.3895, 2.4187, 2.4479, 2.4772, 2.5064,
        -:  115:    2.5356,
        -:  116:    2.5610, 2.5864, 2.6117, 2.6371, 2.6625, 2.6887, 2.7148, 2.7410, 2.7671,
        -:  117:    2.7933
        -:  118:};
        -:  119:
        -:  120:
        -:  121:/********************* Static subroutines local to place.c *******************/
        -:  122:
        -:  123:static void alloc_and_load_unique_pin_list(void);
        -:  124:
        -:  125:static void free_unique_pin_list(void);
        -:  126:
        -:  127:static void alloc_place_regions(int num_regions);
        -:  128:
        -:  129:static void load_place_regions(int num_regions);
        -:  130:
        -:  131:static void free_place_regions(int num_regions);
        -:  132:
        -:  133:static void alloc_and_load_placement_structs(int place_cost_type,
        -:  134:					     int num_regions,
        -:  135:					     float place_cost_exp,
        -:  136:					     float ***old_region_occ_x,
        -:  137:					     float ***old_region_occ_y,
        -:  138:					     struct s_placer_opts
        -:  139:					     placer_opts);
        -:  140:
        -:  141:static void free_placement_structs(int place_cost_type,
        -:  142:				   int num_regions,
        -:  143:				   float **old_region_occ_x,
        -:  144:				   float **old_region_occ_y,
        -:  145:				   struct s_placer_opts placer_opts);
        -:  146:
        -:  147:static void alloc_and_load_for_fast_cost_update(float place_cost_exp);
        -:  148:
        -:  149:static void initial_placement(enum e_pad_loc_type pad_loc_type,
        -:  150:			      char *pad_loc_file);
        -:  151:
        -:  152:static float comp_bb_cost(int method,
        -:  153:			  int place_cost_type,
        -:  154:			  int num_regions);
        -:  155:
        -:  156:static int try_swap(float t,
        -:  157:		    float *cost,
        -:  158:		    float *bb_cost,
        -:  159:		    float *timing_cost,
        -:  160:		    float rlim,
        -:  161:		    int place_cost_type,
        -:  162:		    float **old_region_occ_x,
        -:  163:		    float **old_region_occ_y,
        -:  164:		    int num_regions,
        -:  165:		    boolean fixed_pins,
        -:  166:		    enum e_place_algorithm place_algorithm,
        -:  167:		    float timing_tradeoff,
        -:  168:		    float inverse_prev_bb_cost,
        -:  169:		    float inverse_prev_timing_cost,
        -:  170:		    float *delay_cost,
        -:  171:		    int *x_lookup);
        -:  172:
        -:  173:static void check_place(float bb_cost,
        -:  174:			float timing_cost,
        -:  175:			int place_cost_type,
        -:  176:			int num_regions,
        -:  177:			enum e_place_algorithm place_algorithm,
        -:  178:			float delay_cost);
        -:  179:
        -:  180:static float starting_t(float *cost_ptr,
        -:  181:			float *bb_cost_ptr,
        -:  182:			float *timing_cost_ptr,
        -:  183:			int place_cost_type,
        -:  184:			float **old_region_occ_x,
        -:  185:			float **old_region_occ_y,
        -:  186:			int num_regions,
        -:  187:			boolean fixed_pins,
        -:  188:			struct s_annealing_sched annealing_sched,
        -:  189:			int max_moves,
        -:  190:			float rlim,
        -:  191:			enum e_place_algorithm place_algorithm,
        -:  192:			float timing_tradeoff,
        -:  193:			float inverse_prev_bb_cost,
        -:  194:			float inverse_prev_timing_cost,
        -:  195:			float *delay_cost_ptr);
        -:  196:
        -:  197:
        -:  198:static void update_t(float *t,
        -:  199:		     float std_dev,
        -:  200:		     float rlim,
        -:  201:		     float success_rat,
        -:  202:		     struct s_annealing_sched annealing_sched);
        -:  203:
        -:  204:static void update_rlim(float *rlim,
        -:  205:			float success_rat);
        -:  206:
        -:  207:static int exit_crit(float t,
        -:  208:		     float cost,
        -:  209:		     struct s_annealing_sched annealing_sched);
        -:  210:
        -:  211:static int count_connections(void);
        -:  212:
        -:  213:static void compute_net_pin_index_values(void);
        -:  214:
        -:  215:static double get_std_dev(int n,
        -:  216:			  double sum_x_squared,
        -:  217:			  double av_x);
        -:  218:
        -:  219:static void free_fast_cost_update_structs(void);
        -:  220:
        -:  221:static float recompute_bb_cost(int place_cost_type,
        -:  222:			       int num_regions);
        -:  223:
        -:  224:static float comp_td_point_to_point_delay(int inet,
        -:  225:					  int ipin);
        -:  226:
        -:  227:static void update_td_cost(int b_from,
        -:  228:			   int b_to,
        -:  229:			   int num_of_pins);
        -:  230:
        -:  231:static void comp_delta_td_cost(int b_from,
        -:  232:			       int b_to,
        -:  233:			       int num_of_pins,
        -:  234:			       float *delta_timing,
        -:  235:			       float *delta_delay);
        -:  236:
        -:  237:static void comp_td_costs(float *timing_cost,
        -:  238:			  float *connection_delay_sum);
        -:  239:
        -:  240:static int assess_swap(float delta_c,
        -:  241:		       float t);
        -:  242:
        -:  243:static boolean find_to(int x_from,
        -:  244:		       int y_from,
        -:  245:		       t_type_ptr type,
        -:  246:		       float rlim,
        -:  247:		       int *x_lookup,
        -:  248:		       int *x_to,
        -:  249:		       int *y_to);
        -:  250:
        -:  251:static void get_non_updateable_bb(int inet,
        -:  252:				  struct s_bb *bb_coord_new);
        -:  253:
        -:  254:static void update_bb(int inet,
        -:  255:		      struct s_bb *bb_coord_new,
        -:  256:		      struct s_bb *bb_edge_new,
        -:  257:		      int xold,
        -:  258:		      int yold,
        -:  259:		      int xnew,
        -:  260:		      int ynew);
        -:  261:
        -:  262:static int find_affected_nets(int *nets_to_update,
        -:  263:			      int *net_block_moved,
        -:  264:			      int b_from,
        -:  265:			      int b_to,
        -:  266:			      int num_of_pins);
        -:  267:
        -:  268:static float get_net_cost(int inet,
        -:  269:			  struct s_bb *bb_ptr);
        -:  270:
        -:  271:static float nonlinear_cong_cost(int num_regions);
        -:  272:
        -:  273:static void update_region_occ(int inet,
        -:  274:			      struct s_bb *coords,
        -:  275:			      int add_or_sub,
        -:  276:			      int num_regions);
        -:  277:
        -:  278:static void save_region_occ(float **old_region_occ_x,
        -:  279:			    float **old_region_occ_y,
        -:  280:			    int num_regions);
        -:  281:
        -:  282:static void restore_region_occ(float **old_region_occ_x,
        -:  283:			       float **old_region_occ_y,
        -:  284:			       int num_regions);
        -:  285:
        -:  286:static void get_bb_from_scratch(int inet,
        -:  287:				struct s_bb *coords,
        -:  288:				struct s_bb *num_on_edges);
        -:  289:
        -:  290:static double get_net_wirelength_estimate(int inet,
        -:  291:					  struct s_bb *bbptr);
        -:  292:
        -:  293:/*****************************************************************************/
        -:  294:/* RESEARCH TODO: Bounding Box and rlim need to be redone for heterogeneous to prevent a QoR penalty */
        -:  295:void
function try_place called 1 returned 100% blocks executed 69%
        1:  296:try_place(struct s_placer_opts placer_opts,
        -:  297:	  struct s_annealing_sched annealing_sched,
        -:  298:	  t_chan_width_dist chan_width_dist,
        -:  299:	  struct s_router_opts router_opts,
        -:  300:	  struct s_det_routing_arch det_routing_arch,
        -:  301:	  t_segment_inf * segment_inf,
        -:  302:	  t_timing_inf timing_inf,
        -:  303:	  t_subblock_data * subblock_data_ptr,
        -:  304:	  t_mst_edge *** mst)
        -:  305:{
        -:  306:
        -:  307:    /* Does almost all the work of placing a circuit.  Width_fac gives the   *
        -:  308:     * width of the widest channel.  Place_cost_exp says what exponent the   *
        -:  309:     * width should be taken to when calculating costs.  This allows a       *
        -:  310:     * greater bias for anisotropic architectures.  Place_cost_type          *
        -:  311:     * determines which cost function is used.  num_regions is used only     *
        -:  312:     * the place_cost_type is NONLINEAR_CONG.                                */
        -:  313:
        -:  314:
        -:  315:    int tot_iter, inner_iter, success_sum;
        -:  316:    int move_lim, moves_since_cost_recompute, width_fac;
        -:  317:    float t, success_rat, rlim, d_max, est_crit;
        -:  318:    float cost, timing_cost, bb_cost, new_bb_cost, new_timing_cost;
        -:  319:    float delay_cost, new_delay_cost, place_delay_value;
        -:  320:    float inverse_prev_bb_cost, inverse_prev_timing_cost;
        -:  321:    float oldt;
        -:  322:    double av_cost, av_bb_cost, av_timing_cost, av_delay_cost,
        -:  323:	sum_of_squares, std_dev;
        -:  324:    float **old_region_occ_x, **old_region_occ_y;
        -:  325:    char msg[BUFSIZE];
        -:  326:    boolean fixed_pins;		/* Can pads move or not? */
        -:  327:    int num_connections;
        -:  328:    int inet, ipin, outer_crit_iter_count, inner_crit_iter_count,
        -:  329:	inner_recompute_limit;
        -:  330:    float **net_slack, **net_delay;
        -:  331:    float crit_exponent;
        -:  332:    float first_rlim, final_rlim, inverse_delta_rlim;
        -:  333:    float **remember_net_delay_original_ptr;	/*used to free net_delay if it is re-assigned */
        -:  334:
        -:  335:    int *x_lookup;		/* Used to quickly determine valid swap columns */
        -:  336:
        -:  337:    /* Allocated here because it goes into timing critical code where each memory allocation is expensive */
        1:  338:    x_lookup = my_malloc(nx * sizeof(int));
call    0 returned 100%
        -:  339:
        1:  340:    remember_net_delay_original_ptr = NULL;	/*prevents compiler warning */
        -:  341:
        2:  342:    if(placer_opts.place_algorithm == NET_TIMING_DRIVEN_PLACE ||
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        1:  343:       placer_opts.place_algorithm == PATH_TIMING_DRIVEN_PLACE ||
branch  0 never executed
branch  1 never executed
    #####:  344:       placer_opts.enable_timing_computations)
        -:  345:	{
        -:  346:	    /*do this before the initial placement to avoid messing up the initial placement */
        1:  347:	    alloc_lookups_and_criticalities(chan_width_dist,
call    0 returned 100%
        -:  348:					    router_opts,
        -:  349:					    det_routing_arch,
        -:  350:					    segment_inf,
        -:  351:					    timing_inf,
        -:  352:					    *subblock_data_ptr,
        -:  353:					    &net_delay, &net_slack);
        -:  354:
        1:  355:	    remember_net_delay_original_ptr = net_delay;
        -:  356:
        -:  357:	    /*#define PRINT_LOWER_BOUND */
        -:  358:#ifdef PRINT_LOWER_BOUND
        -:  359:	    /*print the crit_path, assuming delay between blocks that are*
        -:  360:	     *block_dist apart*/
        -:  361:
        -:  362:	    if(placer_opts.block_dist <= nx)
        -:  363:		place_delay_value =
        -:  364:		    delta_clb_to_clb[placer_opts.block_dist][0];
        -:  365:	    else if(placer_opts.block_dist <= ny)
        -:  366:		place_delay_value =
        -:  367:		    delta_clb_to_clb[0][placer_opts.block_dist];
        -:  368:	    else
        -:  369:		place_delay_value = delta_clb_to_clb[nx][ny];
        -:  370:
        -:  371:	    printf("\nLower bound assuming delay of %g\n", place_delay_value);
        -:  372:
        -:  373:	    load_constant_net_delay(net_delay, place_delay_value);
        -:  374:	    load_timing_graph_net_delays(net_delay);
        -:  375:	    d_max = load_net_slack(net_slack, 0);
        -:  376:
        -:  377:#ifdef CREATE_ECHO_FILES
        -:  378:	    print_critical_path("Placement_Lower_Bound.echo");
        -:  379:	    print_sink_delays("Placement_Lower_Bound_Sink_Delays.echo");
        -:  380:#endif /* CREATE_ECHO_FILES */
        -:  381:
        -:  382:	    /*also print sink delays assuming 0 delay between blocks, 
        -:  383:	     * this tells us how much logic delay is on each path */
        -:  384:
        -:  385:	    load_constant_net_delay(net_delay, 0);
        -:  386:	    load_timing_graph_net_delays(net_delay);
        -:  387:	    d_max = load_net_slack(net_slack, 0);
        -:  388:
        -:  389:#ifdef CREATE_ECHO_FILES
        -:  390:	    print_sink_delays("Placement_Logic_Sink_Delays.echo");
        -:  391:#endif /* CREATE_ECHO_FILES */
        -:  392:#endif
        -:  393:
        -:  394:	}
        -:  395:
        1:  396:    width_fac = placer_opts.place_chan_width;
        1:  397:    if(placer_opts.pad_loc_type == FREE)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  398:	fixed_pins = FALSE;
        -:  399:    else
    #####:  400:	fixed_pins = TRUE;
        -:  401:
        1:  402:    init_chan(width_fac, chan_width_dist);
call    0 returned 100%
        -:  403:
        1:  404:    alloc_and_load_placement_structs(placer_opts.place_cost_type,
call    0 returned 100%
        -:  405:				     placer_opts.num_regions,
        -:  406:				     placer_opts.place_cost_exp,
        -:  407:				     &old_region_occ_x, &old_region_occ_y,
        -:  408:				     placer_opts);
        -:  409:
        1:  410:    initial_placement(placer_opts.pad_loc_type, placer_opts.pad_loc_file);
call    0 returned 100%
        1:  411:    init_draw_coords((float)width_fac);
call    0 returned 100%
        -:  412:
        -:  413:    /* Storing the number of pins on each type of block makes the swap routine *
        -:  414:     * slightly more efficient.                                                */
        -:  415:
        -:  416:    /* Gets initial cost and loads bounding boxes. */
        -:  417:
        2:  418:    if(placer_opts.place_algorithm == NET_TIMING_DRIVEN_PLACE ||
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        1:  419:       placer_opts.place_algorithm == PATH_TIMING_DRIVEN_PLACE)
        -:  420:	{
        1:  421:	    bb_cost = comp_bb_cost(NORMAL, placer_opts.place_cost_type,
call    0 returned 100%
        -:  422:				   placer_opts.num_regions);
        -:  423:
        1:  424:	    crit_exponent = placer_opts.td_place_exp_first;	/*this will be modified when rlim starts to change */
        -:  425:
        1:  426:	    compute_net_pin_index_values();
call    0 returned 100%
        -:  427:
        1:  428:	    num_connections = count_connections();
call    0 returned 100%
        1:  429:	    printf
call    0 returned 100%
        -:  430:		("\nThere are %d point to point connections in this circuit\n\n",
        -:  431:		 num_connections);
        -:  432:
        1:  433:	    if(placer_opts.place_algorithm == NET_TIMING_DRIVEN_PLACE)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  434:		{
    #####:  435:		    for(inet = 0; inet < num_nets; inet++)
branch  0 never executed
branch  1 never executed
    #####:  436:			for(ipin = 1; ipin <= net[inet].num_sinks; ipin++)
branch  0 never executed
branch  1 never executed
    #####:  437:			    timing_place_crit[inet][ipin] = 0;	/*dummy crit values */
        -:  438:
    #####:  439:		    comp_td_costs(&timing_cost, &delay_cost);	/*first pass gets delay_cost, which is used 
call    0 never executed
        -:  440:								 * in criticality computations in the next call
        -:  441:								 * to comp_td_costs. */
    #####:  442:		    place_delay_value = delay_cost / num_connections;	/*used for computing criticalities */
    #####:  443:		    load_constant_net_delay(net_delay, place_delay_value);
call    0 never executed
        -:  444:
        -:  445:		}
        -:  446:	    else
        1:  447:		place_delay_value = 0;
        -:  448:
        -:  449:
        1:  450:	    if(placer_opts.place_algorithm == PATH_TIMING_DRIVEN_PLACE)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  451:		{
        1:  452:		    net_delay = point_to_point_delay_cost;	/*this keeps net_delay up to date with      *
        -:  453:								 * *the same values that the placer is using  *
        -:  454:								 * *point_to_point_delay_cost is computed each*
        -:  455:								 * *time that comp_td_costs is called, and is *
        -:  456:								 * *also updated after any swap is accepted   */
        -:  457:		}
        -:  458:
        -:  459:
        1:  460:	    load_timing_graph_net_delays(net_delay);
call    0 returned 100%
        1:  461:	    d_max = load_net_slack(net_slack, 0);
call    0 returned 100%
        1:  462:	    load_criticalities(placer_opts, net_slack, d_max, crit_exponent);
call    0 returned 100%
        1:  463:	    outer_crit_iter_count = 1;
        -:  464:
        -:  465:	    /*now we can properly compute costs  */
        1:  466:	    comp_td_costs(&timing_cost, &delay_cost);	/*also puts proper values into point_to_point_delay_cost */
call    0 returned 100%
        -:  467:
        1:  468:	    inverse_prev_timing_cost = 1 / timing_cost;
        1:  469:	    inverse_prev_bb_cost = 1 / bb_cost;
        1:  470:	    cost = 1;		/*our new cost function uses normalized values of           */
        -:  471:	    /*bb_cost and timing_cost, the value of cost will be reset  */
        -:  472:	    /*to 1 at each temperature when *_TIMING_DRIVEN_PLACE is true */
        -:  473:	}
        -:  474:    else
        -:  475:	{			/*BOUNDING_BOX_PLACE */
    #####:  476:	    cost = bb_cost = comp_bb_cost(NORMAL, placer_opts.place_cost_type,
call    0 never executed
        -:  477:					  placer_opts.num_regions);
    #####:  478:	    timing_cost = 0;
    #####:  479:	    delay_cost = 0;
    #####:  480:	    place_delay_value = 0;
    #####:  481:	    outer_crit_iter_count = 0;
    #####:  482:	    num_connections = 0;
    #####:  483:	    d_max = 0;
    #####:  484:	    crit_exponent = 0;
        -:  485:
    #####:  486:	    inverse_prev_timing_cost = 0;	/*inverses not used */
    #####:  487:	    inverse_prev_bb_cost = 0;
        -:  488:	}
        -:  489:
        1:  490:    move_lim = (int)(annealing_sched.inner_num * pow(num_blocks, 1.3333));
        -:  491:
        1:  492:    if(placer_opts.inner_loop_recompute_divider != 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  493:	inner_recompute_limit = (int)(0.5 + (float)move_lim /
    #####:  494:				      (float)placer_opts.
        -:  495:				      inner_loop_recompute_divider);
        -:  496:    else			/*don't do an inner recompute */
        1:  497:	inner_recompute_limit = move_lim + 1;
        -:  498:
        -:  499:
        -:  500:    /* Sometimes I want to run the router with a random placement.  Avoid *
        -:  501:     * using 0 moves to stop division by 0 and 0 length vector problems,  *
        -:  502:     * by setting move_lim to 1 (which is still too small to do any       *
        -:  503:     * significant optimization).                                         */
        -:  504:
        1:  505:    if(move_lim <= 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  506:	move_lim = 1;
        -:  507:
        1:  508:    rlim = (float)max(nx, ny);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  509:
        1:  510:    first_rlim = rlim;		/*used in timing-driven placement for exponent computation */
        1:  511:    final_rlim = 1;
        1:  512:    inverse_delta_rlim = 1 / (first_rlim - final_rlim);
        -:  513:
        2:  514:    t = starting_t(&cost, &bb_cost, &timing_cost,
call    0 returned 100%
        1:  515:		   placer_opts.place_cost_type,
        -:  516:		   old_region_occ_x, old_region_occ_y,
        -:  517:		   placer_opts.num_regions, fixed_pins, annealing_sched,
        -:  518:		   move_lim, rlim, placer_opts.place_algorithm,
        -:  519:		   placer_opts.timing_tradeoff, inverse_prev_bb_cost,
        -:  520:		   inverse_prev_timing_cost, &delay_cost);
        1:  521:    tot_iter = 0;
        1:  522:    moves_since_cost_recompute = 0;
        1:  523:    printf
call    0 returned 100%
        -:  524:	("Initial Placement Cost: %g bb_cost: %g td_cost: %g delay_cost: %g\n\n",
        -:  525:	 cost, bb_cost, timing_cost, delay_cost);
        -:  526:
        -:  527:#ifndef SPEC
        1:  528:    printf
call    0 returned 100%
        -:  529:	("%11s  %10s %11s  %11s  %11s %11s  %11s %9s %8s  %7s  %7s  %10s  %7s\n",
        -:  530:	 "T", "Cost", "Av. BB Cost", "Av. TD Cost", "Av Tot Del",
        -:  531:	 "P to P Del", "d_max", "Ac Rate", "Std Dev", "R limit", "Exp",
        -:  532:	 "Tot. Moves", "Alpha");
        1:  533:    printf
call    0 returned 100%
        -:  534:	("%11s  %10s %11s  %11s  %11s %11s  %11s %9s %8s  %7s  %7s  %10s  %7s\n",
        -:  535:	 "--------", "----------", "-----------", "-----------",
        -:  536:	 "---------", "----------", "-----", "-------", "-------",
        -:  537:	 "-------", "-------", "----------", "-----");
        -:  538:#endif
        -:  539:
        1:  540:    sprintf(msg,
        -:  541:	    "Initial Placement.  Cost: %g  BB Cost: %g  TD Cost %g  Delay Cost: %g "
        -:  542:	    "\t d_max %g Channel Factor: %d", cost, bb_cost, timing_cost,
        -:  543:	    delay_cost, d_max, width_fac);
        1:  544:    update_screen(MAJOR, msg, PLACEMENT, FALSE);
call    0 returned 100%
        -:  545:
      123:  546:    while(exit_crit(t, cost, annealing_sched) == 0)
call    0 returned 100%
branch  1 taken 99%
branch  2 taken 1% (fallthrough)
        -:  547:	{
        -:  548:
      242:  549:	    if(placer_opts.place_algorithm == NET_TIMING_DRIVEN_PLACE ||
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
      121:  550:	       placer_opts.place_algorithm == PATH_TIMING_DRIVEN_PLACE)
        -:  551:		{
      121:  552:		    cost = 1;
        -:  553:		}
        -:  554:
      121:  555:	    av_cost = 0.;
      121:  556:	    av_bb_cost = 0.;
      121:  557:	    av_delay_cost = 0.;
      121:  558:	    av_timing_cost = 0.;
      121:  559:	    sum_of_squares = 0.;
      121:  560:	    success_sum = 0;
        -:  561:
      242:  562:	    if(placer_opts.place_algorithm == NET_TIMING_DRIVEN_PLACE ||
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
      121:  563:	       placer_opts.place_algorithm == PATH_TIMING_DRIVEN_PLACE)
        -:  564:		{
        -:  565:
      121:  566:		    if(outer_crit_iter_count >=
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
      121:  567:		       placer_opts.recompute_crit_iter
    #####:  568:		       || placer_opts.inner_loop_recompute_divider != 0)
branch  0 never executed
branch  1 never executed
        -:  569:			{
        -:  570:#ifdef VERBOSE
        -:  571:			    printf("Outer Loop Recompute Criticalities\n");
        -:  572:#endif
      121:  573:			    place_delay_value = delay_cost / num_connections;
        -:  574:
      121:  575:			    if(placer_opts.place_algorithm ==
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  576:			       NET_TIMING_DRIVEN_PLACE)
    #####:  577:				load_constant_net_delay(net_delay,
call    0 never executed
        -:  578:							place_delay_value);
        -:  579:			    /*note, for path_based, the net delay is not updated since it is current,
        -:  580:			     *because it accesses point_to_point_delay array */
        -:  581:
      121:  582:			    load_timing_graph_net_delays(net_delay);
call    0 returned 100%
      121:  583:			    d_max = load_net_slack(net_slack, 0);
call    0 returned 100%
      121:  584:			    load_criticalities(placer_opts, net_slack, d_max,
call    0 returned 100%
        -:  585:					       crit_exponent);
        -:  586:			    /*recompute costs from scratch, based on new criticalities */
      121:  587:			    comp_td_costs(&timing_cost, &delay_cost);
call    0 returned 100%
      121:  588:			    outer_crit_iter_count = 0;
        -:  589:			}
      121:  590:		    outer_crit_iter_count++;
        -:  591:
        -:  592:		    /*at each temperature change we update these values to be used     */
        -:  593:		    /*for normalizing the tradeoff between timing and wirelength (bb)  */
      121:  594:		    inverse_prev_bb_cost = 1 / bb_cost;
      121:  595:		    inverse_prev_timing_cost = 1 / timing_cost;
        -:  596:		}
        -:  597:
      121:  598:	    inner_crit_iter_count = 1;
        -:  599:
   862851:  600:	    for(inner_iter = 0; inner_iter < move_lim; inner_iter++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:  601:		{
  1725460:  602:		    if(try_swap(t, &cost, &bb_cost, &timing_cost,
call    0 returned 100%
branch  1 taken 45% (fallthrough)
branch  2 taken 55%
   862730:  603:				rlim, placer_opts.place_cost_type,
        -:  604:				old_region_occ_x, old_region_occ_y,
        -:  605:				placer_opts.num_regions, fixed_pins,
        -:  606:				placer_opts.place_algorithm,
        -:  607:				placer_opts.timing_tradeoff,
        -:  608:				inverse_prev_bb_cost,
        -:  609:				inverse_prev_timing_cost, &delay_cost,
        -:  610:				x_lookup) == 1)
        -:  611:			{
   386509:  612:			    success_sum++;
   386509:  613:			    av_cost += cost;
   386509:  614:			    av_bb_cost += bb_cost;
   386509:  615:			    av_timing_cost += timing_cost;
   386509:  616:			    av_delay_cost += delay_cost;
   386509:  617:			    sum_of_squares += cost * cost;
        -:  618:			}
        -:  619:
   862730:  620:		    if(placer_opts.place_algorithm == NET_TIMING_DRIVEN_PLACE
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
   862730:  621:		       || placer_opts.place_algorithm ==
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  622:		       PATH_TIMING_DRIVEN_PLACE)
        -:  623:			{
        -:  624:
   862730:  625:			    if(inner_crit_iter_count >= inner_recompute_limit
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  626:			       && inner_iter != move_lim - 1)
branch  0 never executed
branch  1 never executed
        -:  627:				{	/*on last iteration don't recompute */
        -:  628:
    #####:  629:				    inner_crit_iter_count = 0;
        -:  630:#ifdef VERBOSE
        -:  631:				    printf
        -:  632:					("Inner Loop Recompute Criticalities\n");
        -:  633:#endif
    #####:  634:				    if(placer_opts.place_algorithm ==
branch  0 never executed
branch  1 never executed
        -:  635:				       NET_TIMING_DRIVEN_PLACE)
        -:  636:					{
    #####:  637:					    place_delay_value =
    #####:  638:						delay_cost / num_connections;
    #####:  639:					    load_constant_net_delay(net_delay,
call    0 never executed
        -:  640:								    place_delay_value);
        -:  641:					}
        -:  642:
    #####:  643:				    load_timing_graph_net_delays(net_delay);
call    0 never executed
    #####:  644:				    d_max = load_net_slack(net_slack, 0);
call    0 never executed
    #####:  645:				    load_criticalities(placer_opts, net_slack,
call    0 never executed
        -:  646:						       d_max, crit_exponent);
    #####:  647:				    comp_td_costs(&timing_cost, &delay_cost);
call    0 never executed
        -:  648:				}
   862730:  649:			    inner_crit_iter_count++;
        -:  650:			}
        -:  651:#ifdef VERBOSE
        -:  652:		    printf
        -:  653:			("t = %g  cost = %g   bb_cost = %g timing_cost = %g move = %d dmax = %g\n",
        -:  654:			 t, cost, bb_cost, timing_cost, inner_iter, d_max);
        -:  655:		    if(fabs
        -:  656:		       (bb_cost -
        -:  657:			comp_bb_cost(CHECK, placer_opts.place_cost_type,
        -:  658:				     placer_opts.num_regions)) >
        -:  659:		       bb_cost * ERROR_TOL)
        -:  660:			exit(1);
        -:  661:#endif
        -:  662:		}
        -:  663:
        -:  664:	    /* Lines below prevent too much round-off error from accumulating *
        -:  665:	     * in the cost over many iterations.  This round-off can lead to  *
        -:  666:	     * error checks failing because the cost is different from what   *
        -:  667:	     * you get when you recompute from scratch.                       */
        -:  668:
      121:  669:	    moves_since_cost_recompute += move_lim;
      121:  670:	    if(moves_since_cost_recompute > MAX_MOVES_BEFORE_RECOMPUTE)
branch  0 taken 12% (fallthrough)
branch  1 taken 88%
        -:  671:		{
       15:  672:		    new_bb_cost =
call    0 returned 100%
       15:  673:			recompute_bb_cost(placer_opts.place_cost_type,
        -:  674:					  placer_opts.num_regions);
       15:  675:		    if(fabs(new_bb_cost - bb_cost) > bb_cost * ERROR_TOL)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  676:			{
    #####:  677:			    printf
call    0 never executed
        -:  678:				("Error in try_place:  new_bb_cost = %g, old bb_cost = %g.\n",
        -:  679:				 new_bb_cost, bb_cost);
    #####:  680:			    exit(1);
call    0 never executed
        -:  681:			}
       15:  682:		    bb_cost = new_bb_cost;
        -:  683:
       15:  684:		    if(placer_opts.place_algorithm == NET_TIMING_DRIVEN_PLACE
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       15:  685:		       || placer_opts.place_algorithm ==
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  686:		       PATH_TIMING_DRIVEN_PLACE)
        -:  687:			{
       15:  688:			    comp_td_costs(&new_timing_cost, &new_delay_cost);
call    0 returned 100%
       30:  689:			    if(fabs(new_timing_cost - timing_cost) >
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       15:  690:			       timing_cost * ERROR_TOL)
        -:  691:				{
    #####:  692:				    printf
call    0 never executed
        -:  693:					("Error in try_place:  new_timing_cost = %g, old timing_cost = %g.\n",
        -:  694:					 new_timing_cost, timing_cost);
    #####:  695:				    exit(1);
call    0 never executed
        -:  696:				}
       30:  697:			    if(fabs(new_delay_cost - delay_cost) >
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       15:  698:			       delay_cost * ERROR_TOL)
        -:  699:				{
    #####:  700:				    printf
call    0 never executed
        -:  701:					("Error in try_place:  new_delay_cost = %g, old delay_cost = %g.\n",
        -:  702:					 new_delay_cost, delay_cost);
    #####:  703:				    exit(1);
call    0 never executed
        -:  704:				}
       15:  705:			    timing_cost = new_timing_cost;
        -:  706:			}
        -:  707:
       15:  708:		    if(placer_opts.place_algorithm == BOUNDING_BOX_PLACE)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  709:			{
    #####:  710:			    cost = new_bb_cost;
        -:  711:			}
       15:  712:		    moves_since_cost_recompute = 0;
        -:  713:		}
        -:  714:
      121:  715:	    tot_iter += move_lim;
      121:  716:	    success_rat = ((float)success_sum) / move_lim;
      121:  717:	    if(success_sum == 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  718:		{
    #####:  719:		    av_cost = cost;
    #####:  720:		    av_bb_cost = bb_cost;
    #####:  721:		    av_timing_cost = timing_cost;
    #####:  722:		    av_delay_cost = delay_cost;
        -:  723:		}
        -:  724:	    else
        -:  725:		{
      121:  726:		    av_cost /= success_sum;
      121:  727:		    av_bb_cost /= success_sum;
      121:  728:		    av_timing_cost /= success_sum;
      121:  729:		    av_delay_cost /= success_sum;
        -:  730:		}
      121:  731:	    std_dev = get_std_dev(success_sum, sum_of_squares, av_cost);
call    0 returned 100%
        -:  732:
        -:  733:#ifndef SPEC
      121:  734:	    printf
call    0 returned 100%
        -:  735:		("%11.5g  %10.6g %11.6g  %11.6g  %11.6g %11.6g %11.4g %9.4g %8.3g  %7.4g  %7.4g  %10d  ",
        -:  736:		 t, av_cost, av_bb_cost, av_timing_cost, av_delay_cost,
        -:  737:		 place_delay_value, d_max, success_rat, std_dev, rlim,
        -:  738:		 crit_exponent, tot_iter);
        -:  739:#endif
        -:  740:
      121:  741:	    oldt = t;		/* for finding and printing alpha. */
      121:  742:	    update_t(&t, std_dev, rlim, success_rat, annealing_sched);
call    0 returned 100%
        -:  743:
        -:  744:#ifndef SPEC
      121:  745:	    printf("%7.4g\n", t / oldt);
call    0 returned 100%
        -:  746:#endif
        -:  747:
      121:  748:	    sprintf(msg,
        -:  749:		    "Cost: %g  BB Cost %g  TD Cost %g  Temperature: %g  d_max: %g",
        -:  750:		    cost, bb_cost, timing_cost, t, d_max);
      121:  751:	    update_screen(MINOR, msg, PLACEMENT, FALSE);
call    0 returned 100%
      121:  752:	    update_rlim(&rlim, success_rat);
call    0 returned 100%
        -:  753:
      242:  754:	    if(placer_opts.place_algorithm == NET_TIMING_DRIVEN_PLACE ||
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
      121:  755:	       placer_opts.place_algorithm == PATH_TIMING_DRIVEN_PLACE)
        -:  756:		{
      121:  757:		    crit_exponent =
      121:  758:			(1 -
      121:  759:			 (rlim -
      242:  760:			  final_rlim) * inverse_delta_rlim) *
      242:  761:			(placer_opts.td_place_exp_last -
      121:  762:			 placer_opts.td_place_exp_first) +
      121:  763:			placer_opts.td_place_exp_first;
        -:  764:		}
        -:  765:#ifdef VERBOSE
        -:  766:	    dump_clbs();
        -:  767:#endif
        -:  768:	}
        -:  769:
        1:  770:    t = 0;			/* freeze out */
        1:  771:    av_cost = 0.;
        1:  772:    av_bb_cost = 0.;
        1:  773:    av_timing_cost = 0.;
        1:  774:    sum_of_squares = 0.;
        1:  775:    av_delay_cost = 0.;
        1:  776:    success_sum = 0;
        -:  777:
        2:  778:    if(placer_opts.place_algorithm == NET_TIMING_DRIVEN_PLACE ||
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        1:  779:       placer_opts.place_algorithm == PATH_TIMING_DRIVEN_PLACE)
        -:  780:	{
        -:  781:	    /*at each temperature change we update these values to be used     */
        -:  782:	    /*for normalizing the tradeoff between timing and wirelength (bb)  */
        1:  783:	    if(outer_crit_iter_count >= placer_opts.recompute_crit_iter ||
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
    #####:  784:	       placer_opts.inner_loop_recompute_divider != 0)
        -:  785:		{
        -:  786:
        -:  787:#ifdef VERBOSE
        -:  788:		    printf("Outer Loop Recompute Criticalities\n");
        -:  789:#endif
        1:  790:		    place_delay_value = delay_cost / num_connections;
        -:  791:
        1:  792:		    if(placer_opts.place_algorithm == NET_TIMING_DRIVEN_PLACE)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  793:			load_constant_net_delay(net_delay, place_delay_value);
call    0 never executed
        -:  794:
        1:  795:		    load_timing_graph_net_delays(net_delay);
call    0 returned 100%
        1:  796:		    d_max = load_net_slack(net_slack, 0);
call    0 returned 100%
        1:  797:		    load_criticalities(placer_opts, net_slack, d_max,
call    0 returned 100%
        -:  798:				       crit_exponent);
        -:  799:		    /*recompute criticaliies */
        1:  800:		    comp_td_costs(&timing_cost, &delay_cost);
call    0 returned 100%
        1:  801:		    outer_crit_iter_count = 0;
        -:  802:		}
        1:  803:	    outer_crit_iter_count++;
        -:  804:
        1:  805:	    inverse_prev_bb_cost = 1 / (bb_cost);
        1:  806:	    inverse_prev_timing_cost = 1 / (timing_cost);
        -:  807:	}
        -:  808:
        1:  809:    inner_crit_iter_count = 1;
        -:  810:
     7131:  811:    for(inner_iter = 0; inner_iter < move_lim; inner_iter++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:  812:	{
    14260:  813:	    if(try_swap(t, &cost, &bb_cost, &timing_cost,
call    0 returned 100%
branch  1 taken 4% (fallthrough)
branch  2 taken 96%
     7130:  814:			rlim, placer_opts.place_cost_type,
        -:  815:			old_region_occ_x, old_region_occ_y,
        -:  816:			placer_opts.num_regions, fixed_pins,
        -:  817:			placer_opts.place_algorithm,
        -:  818:			placer_opts.timing_tradeoff, inverse_prev_bb_cost,
        -:  819:			inverse_prev_timing_cost, &delay_cost, x_lookup) == 1)
        -:  820:		{
      318:  821:		    success_sum++;
      318:  822:		    av_cost += cost;
      318:  823:		    av_bb_cost += bb_cost;
      318:  824:		    av_delay_cost += delay_cost;
      318:  825:		    av_timing_cost += timing_cost;
      318:  826:		    sum_of_squares += cost * cost;
        -:  827:
      318:  828:		    if(placer_opts.place_algorithm == NET_TIMING_DRIVEN_PLACE
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
      318:  829:		       || placer_opts.place_algorithm ==
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  830:		       PATH_TIMING_DRIVEN_PLACE)
        -:  831:			{
        -:  832:
      318:  833:			    if(inner_crit_iter_count >= inner_recompute_limit
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  834:			       && inner_iter != move_lim - 1)
branch  0 never executed
branch  1 never executed
        -:  835:				{
        -:  836:
    #####:  837:				    inner_crit_iter_count = 0;
        -:  838:#ifdef VERBOSE
        -:  839:				    printf
        -:  840:					("Inner Loop Recompute Criticalities\n");
        -:  841:#endif
    #####:  842:				    if(placer_opts.place_algorithm ==
branch  0 never executed
branch  1 never executed
        -:  843:				       NET_TIMING_DRIVEN_PLACE)
        -:  844:					{
    #####:  845:					    place_delay_value =
    #####:  846:						delay_cost / num_connections;
    #####:  847:					    load_constant_net_delay(net_delay,
call    0 never executed
        -:  848:								    place_delay_value);
        -:  849:					}
        -:  850:
    #####:  851:				    load_timing_graph_net_delays(net_delay);
call    0 never executed
    #####:  852:				    d_max = load_net_slack(net_slack, 0);
call    0 never executed
    #####:  853:				    load_criticalities(placer_opts, net_slack,
call    0 never executed
        -:  854:						       d_max, crit_exponent);
    #####:  855:				    comp_td_costs(&timing_cost, &delay_cost);
call    0 never executed
        -:  856:				}
      318:  857:			    inner_crit_iter_count++;
        -:  858:			}
        -:  859:		}
        -:  860:#ifdef VERBOSE
        -:  861:	    printf("t = %g  cost = %g   move = %d\n", t, cost, tot_iter);
        -:  862:#endif
        -:  863:	}
        1:  864:    tot_iter += move_lim;
        1:  865:    success_rat = ((float)success_sum) / move_lim;
        1:  866:    if(success_sum == 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  867:	{
    #####:  868:	    av_cost = cost;
    #####:  869:	    av_bb_cost = bb_cost;
    #####:  870:	    av_delay_cost = delay_cost;
    #####:  871:	    av_timing_cost = timing_cost;
        -:  872:	}
        -:  873:    else
        -:  874:	{
        1:  875:	    av_cost /= success_sum;
        1:  876:	    av_bb_cost /= success_sum;
        1:  877:	    av_delay_cost /= success_sum;
        1:  878:	    av_timing_cost /= success_sum;
        -:  879:	}
        -:  880:
        1:  881:    std_dev = get_std_dev(success_sum, sum_of_squares, av_cost);
call    0 returned 100%
        -:  882:
        -:  883:
        -:  884:#ifndef SPEC
        1:  885:    printf
call    0 returned 100%
        -:  886:	("%11.5g  %10.6g %11.6g  %11.6g  %11.6g %11.6g %11.4g %9.4g %8.3g  %7.4g  %7.4g  %10d  \n\n",
        -:  887:	 t, av_cost, av_bb_cost, av_timing_cost, av_delay_cost,
        -:  888:	 place_delay_value, d_max, success_rat, std_dev, rlim,
        -:  889:	 crit_exponent, tot_iter);
        -:  890:
        -:  891:#endif
        -:  892:
        -:  893:#ifdef VERBOSE
        -:  894:    dump_clbs();
        -:  895:#endif
        -:  896:
        1:  897:    check_place(bb_cost, timing_cost, placer_opts.place_cost_type,
call    0 returned 100%
        -:  898:		placer_opts.num_regions, placer_opts.place_algorithm,
        -:  899:		delay_cost);
        -:  900:
        2:  901:    if(placer_opts.enable_timing_computations &&
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        1:  902:       placer_opts.place_algorithm == BOUNDING_BOX_PLACE)
        -:  903:	{
        -:  904:	    /*need this done since the timing data has not been kept up to date*
        -:  905:	     *in bounding_box mode */
    #####:  906:	    for(inet = 0; inet < num_nets; inet++)
branch  0 never executed
branch  1 never executed
    #####:  907:		for(ipin = 1; ipin <= net[inet].num_sinks; ipin++)
branch  0 never executed
branch  1 never executed
    #####:  908:		    timing_place_crit[inet][ipin] = 0;	/*dummy crit values */
    #####:  909:	    comp_td_costs(&timing_cost, &delay_cost);	/*computes point_to_point_delay_cost */
call    0 never executed
        -:  910:	}
        -:  911:
        2:  912:    if(placer_opts.place_algorithm == NET_TIMING_DRIVEN_PLACE ||
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        1:  913:       placer_opts.place_algorithm == PATH_TIMING_DRIVEN_PLACE ||
branch  0 never executed
branch  1 never executed
    #####:  914:       placer_opts.enable_timing_computations)
        -:  915:	{
        1:  916:	    net_delay = point_to_point_delay_cost;	/*this makes net_delay up to date with    *
        -:  917:							 *the same values that the placer is using*/
        1:  918:	    load_timing_graph_net_delays(net_delay);
call    0 returned 100%
        1:  919:	    est_crit = load_net_slack(net_slack, 0);
call    0 returned 100%
        -:  920:#ifdef CREATE_ECHO_FILES
        -:  921:/*		print_sink_delays("placement_sink_delays.echo"); */
        -:  922:	    print_net_slack("placement_net_slacks.echo", net_slack);
        -:  923:	    print_critical_path("placement_crit_path.echo",
        -:  924:				*subblock_data_ptr);
        -:  925:#endif /* CREATE_ECHO_FILES */
        1:  926:	    printf("Placement Estimated Crit Path Delay: %g\n\n", est_crit);
call    0 returned 100%
        -:  927:	}
        -:  928:
        -:  929:
        1:  930:    sprintf(msg,
        -:  931:	    "Placement. Cost: %g  bb_cost: %g td_cost: %g Channel Factor: %d d_max: %g",
        -:  932:	    cost, bb_cost, timing_cost, width_fac, d_max);
        1:  933:    printf
call    0 returned 100%
        -:  934:	("Placement. Cost: %g  bb_cost: %g  td_cost: %g  delay_cost: %g.\n",
        -:  935:	 cost, bb_cost, timing_cost, delay_cost);
        1:  936:    update_screen(MAJOR, msg, PLACEMENT, FALSE);
call    0 returned 100%
        -:  937:
        -:  938:#ifdef SPEC
        -:  939:    printf("Total moves attempted: %d.0\n", tot_iter);
        -:  940:#endif
        -:  941:
        2:  942:    if(placer_opts.place_algorithm == NET_TIMING_DRIVEN_PLACE ||
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        1:  943:       placer_opts.place_algorithm == PATH_TIMING_DRIVEN_PLACE ||
branch  0 never executed
branch  1 never executed
    #####:  944:       placer_opts.enable_timing_computations)
        -:  945:	{
        -:  946:
        1:  947:	    net_delay = remember_net_delay_original_ptr;
        -:  948:
        1:  949:	    free_placement_structs(placer_opts.place_cost_type,
call    0 returned 100%
        -:  950:				   placer_opts.num_regions, old_region_occ_x,
        -:  951:				   old_region_occ_y, placer_opts);
        1:  952:	    free_lookups_and_criticalities(&net_delay, &net_slack);
call    0 returned 100%
        -:  953:	}
        -:  954:
        -:  955:    /* placement is done - find mst of all nets.
        -:  956:     * creating mst for each net; this gives me an ordering of sinks 
        -:  957:     * by which I will direct search (A*) for. */
        1:  958:    if(*mst)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  959:	{
    #####:  960:	    for(inet = 0; inet < num_nets; inet++)
branch  0 never executed
branch  1 never executed
        -:  961:		{
    #####:  962:		    assert((*mst)[inet]);
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  963:		    free((*mst)[inet]);
        -:  964:		}
    #####:  965:	    free(*mst);
        -:  966:	}
        1:  967:    *mst = (t_mst_edge **) my_malloc(sizeof(t_mst_edge *) * num_nets);
call    0 returned 100%
      512:  968:    for(inet = 0; inet < num_nets; inet++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:  969:	{
      511:  970:	    (*mst)[inet] = get_mst_of_net(inet);
call    0 returned 100%
        -:  971:	}
        1:  972:    free(x_lookup);
        1:  973:}
        -:  974:
        -:  975:static int
function count_connections called 1 returned 100% blocks executed 100%
        1:  976:count_connections()
        -:  977:{
        -:  978:    /*only count non-global connections */
        -:  979:
        -:  980:    int count, inet;
        -:  981:
        1:  982:    count = 0;
        -:  983:
      512:  984:    for(inet = 0; inet < num_nets; inet++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:  985:	{
        -:  986:
      511:  987:	    if(net[inet].is_global)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        1:  988:		continue;
        -:  989:
      510:  990:	    count += net[inet].num_sinks;
        -:  991:	}
        1:  992:    return (count);
        -:  993:}
        -:  994:
        -:  995:static void
function compute_net_pin_index_values called 1 returned 100% blocks executed 100%
        1:  996:compute_net_pin_index_values()
        -:  997:{
        -:  998:    /*computes net_pin_index array, this array allows us to quickly */
        -:  999:    /*find what pin on the net a block pin corresponds to */
        -: 1000:
        -: 1001:    int inet, netpin, blk, iblk, ipin;
        -: 1002:    t_type_ptr type;
        -: 1003:
        -: 1004:    /*initialize values to OPEN */
      139: 1005:    for(iblk = 0; iblk < num_blocks; iblk++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -: 1006:	{
      138: 1007:	    type = block[iblk].type;
     3380: 1008:	    for(ipin = 0; ipin < type->num_pins; ipin++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -: 1009:		{
     3242: 1010:		    net_pin_index[iblk][ipin] = OPEN;
        -: 1011:		}
        -: 1012:	}
        -: 1013:
      512: 1014:    for(inet = 0; inet < num_nets; inet++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -: 1015:	{
        -: 1016:
      511: 1017:	    if(net[inet].is_global)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        1: 1018:		continue;
        -: 1019:
     2171: 1020:	    for(netpin = 0; netpin <= net[inet].num_sinks; netpin++)
branch  0 taken 77%
branch  1 taken 23% (fallthrough)
        -: 1021:		{
     1661: 1022:		    blk = net[inet].node_block[netpin];
     1661: 1023:		    net_pin_index[blk][net[inet].node_block_pin[netpin]] =
        -: 1024:			netpin;
        -: 1025:		}
        -: 1026:	}
        1: 1027:}
        -: 1028:
        -: 1029:
        -: 1030:static double
function get_std_dev called 123 returned 100% blocks executed 88%
      123: 1031:get_std_dev(int n,
        -: 1032:	    double sum_x_squared,
        -: 1033:	    double av_x)
        -: 1034:{
        -: 1035:
        -: 1036:    /* Returns the standard deviation of data set x.  There are n sample points, *
        -: 1037:     * sum_x_squared is the summation over n of x^2 and av_x is the average x.   *
        -: 1038:     * All operations are done in double precision, since round off error can be *
        -: 1039:     * a problem in the initial temp. std_dev calculation for big circuits.      */
        -: 1040:
        -: 1041:    double std_dev;
        -: 1042:
      123: 1043:    if(n <= 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1044:	std_dev = 0.;
        -: 1045:    else
      123: 1046:	std_dev = (sum_x_squared - n * av_x * av_x) / (double)(n - 1);
        -: 1047:
      123: 1048:    if(std_dev > 0.)		/* Very small variances sometimes round negative */
branch  0 taken 95% (fallthrough)
branch  1 taken 5%
      117: 1049:	std_dev = sqrt(std_dev);
        -: 1050:    else
        6: 1051:	std_dev = 0.;
        -: 1052:
      123: 1053:    return (std_dev);
        -: 1054:}
        -: 1055:
        -: 1056:
        -: 1057:static void
function update_rlim called 121 returned 100% blocks executed 100%
      121: 1058:update_rlim(float *rlim,
        -: 1059:	    float success_rat)
        -: 1060:{
        -: 1061:
        -: 1062:    /* Update the range limited to keep acceptance prob. near 0.44.  Use *
        -: 1063:     * a floating point rlim to allow gradual transitions at low temps.  */
        -: 1064:
        -: 1065:    float upper_lim;
        -: 1066:
      121: 1067:    *rlim = (*rlim) * (1. - 0.44 + success_rat);
      121: 1068:    upper_lim = max(nx, ny);
      121: 1069:    *rlim = min(*rlim, upper_lim);
branch  0 taken 32% (fallthrough)
branch  1 taken 68%
      121: 1070:    *rlim = max(*rlim, 1.);
branch  0 taken 71% (fallthrough)
branch  1 taken 29%
      121: 1071:}
        -: 1072:
        -: 1073:
        -: 1074:/* Update the temperature according to the annealing schedule selected. */
        -: 1075:static void
function update_t called 121 returned 100% blocks executed 91%
      121: 1076:update_t(float *t,
        -: 1077:	 float std_dev,
        -: 1078:	 float rlim,
        -: 1079:	 float success_rat,
        -: 1080:	 struct s_annealing_sched annealing_sched)
        -: 1081:{
        -: 1082:
        -: 1083:    /*  float fac; */
        -: 1084:
      121: 1085:    if(annealing_sched.type == USER_SCHED)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1086:	{
    #####: 1087:	    *t = annealing_sched.alpha_t * (*t);
        -: 1088:	}
        -: 1089:
        -: 1090:    /* Old standard deviation based stuff is below.  This bogs down horribly 
        -: 1091:     * for big circuits (alu4 and especially bigkey_mod). */
        -: 1092:    /* #define LAMBDA .7  */
        -: 1093:    /* ------------------------------------ */
        -: 1094:#if 0
        -: 1095:    else if(std_dev == 0.)
        -: 1096:	{
        -: 1097:	    *t = 0.;
        -: 1098:	}
        -: 1099:    else
        -: 1100:	{
        -: 1101:	    fac = exp(-LAMBDA * (*t) / std_dev);
        -: 1102:	    fac = max(0.5, fac);
        -: 1103:	    *t = (*t) * fac;
        -: 1104:	}
        -: 1105:#endif
        -: 1106:    /* ------------------------------------- */
        -: 1107:
        -: 1108:    else
        -: 1109:    {				/* AUTO_SCHED */
      121: 1110:	if(success_rat > 0.96)
branch  0 taken 3% (fallthrough)
branch  1 taken 97%
        -: 1111:	    {
        4: 1112:		*t = (*t) * 0.5;
        -: 1113:	    }
      117: 1114:	else if(success_rat > 0.8)
branch  0 taken 8% (fallthrough)
branch  1 taken 92%
        -: 1115:	    {
        9: 1116:		*t = (*t) * 0.9;
        -: 1117:	    }
      108: 1118:	else if(success_rat > 0.15 || rlim > 1.)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -: 1119:	    {
      101: 1120:		*t = (*t) * 0.95;
        -: 1121:	    }
        -: 1122:	else
        -: 1123:	    {
        7: 1124:		*t = (*t) * 0.8;
        -: 1125:	    }
        -: 1126:    }
      121: 1127:}
        -: 1128:
        -: 1129:
        -: 1130:static int
function exit_crit called 122 returned 100% blocks executed 63%
      122: 1131:exit_crit(float t,
        -: 1132:	  float cost,
        -: 1133:	  struct s_annealing_sched annealing_sched)
        -: 1134:{
        -: 1135:
        -: 1136:    /* Return 1 when the exit criterion is met.                        */
        -: 1137:
      122: 1138:    if(annealing_sched.type == USER_SCHED)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1139:	{
    #####: 1140:	    if(t < annealing_sched.exit_t)
branch  0 never executed
branch  1 never executed
        -: 1141:		{
    #####: 1142:		    return (1);
        -: 1143:		}
        -: 1144:	    else
        -: 1145:		{
    #####: 1146:		    return (0);
        -: 1147:		}
        -: 1148:	}
        -: 1149:
        -: 1150:    /* Automatic annealing schedule */
        -: 1151:
      122: 1152:    if(t < 0.005 * cost / num_nets)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -: 1153:	{
        1: 1154:	    return (1);
        -: 1155:	}
        -: 1156:    else
        -: 1157:	{
      121: 1158:	    return (0);
        -: 1159:	}
        -: 1160:}
        -: 1161:
        -: 1162:
        -: 1163:static float
function starting_t called 1 returned 100% blocks executed 82%
        1: 1164:starting_t(float *cost_ptr,
        -: 1165:	   float *bb_cost_ptr,
        -: 1166:	   float *timing_cost_ptr,
        -: 1167:	   int place_cost_type,
        -: 1168:	   float **old_region_occ_x,
        -: 1169:	   float **old_region_occ_y,
        -: 1170:	   int num_regions,
        -: 1171:	   boolean fixed_pins,
        -: 1172:	   struct s_annealing_sched annealing_sched,
        -: 1173:	   int max_moves,
        -: 1174:	   float rlim,
        -: 1175:	   enum e_place_algorithm place_algorithm,
        -: 1176:	   float timing_tradeoff,
        -: 1177:	   float inverse_prev_bb_cost,
        -: 1178:	   float inverse_prev_timing_cost,
        -: 1179:	   float *delay_cost_ptr)
        -: 1180:{
        -: 1181:
        -: 1182:    /* Finds the starting temperature (hot condition).              */
        -: 1183:
        -: 1184:    int i, num_accepted, move_lim;
        -: 1185:    double std_dev, av, sum_of_squares;	/* Double important to avoid round off */
        -: 1186:    int *x_lookup;
        -: 1187:
        1: 1188:    x_lookup = (int *)my_malloc(nx * sizeof(int));
call    0 returned 100%
        -: 1189:
        1: 1190:    if(annealing_sched.type == USER_SCHED)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1191:	return (annealing_sched.init_t);
        -: 1192:
        1: 1193:    move_lim = min(max_moves, num_blocks);
        -: 1194:
        1: 1195:    num_accepted = 0;
        1: 1196:    av = 0.;
        1: 1197:    sum_of_squares = 0.;
        -: 1198:
        -: 1199:    /* Try one move per block.  Set t high so essentially all accepted. */
        -: 1200:
      139: 1201:    for(i = 0; i < move_lim; i++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -: 1202:	{
      138: 1203:	    if(try_swap(1.e30, cost_ptr, bb_cost_ptr, timing_cost_ptr, rlim,
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        -: 1204:			place_cost_type,
        -: 1205:			old_region_occ_x, old_region_occ_y, num_regions,
        -: 1206:			fixed_pins, place_algorithm, timing_tradeoff,
        -: 1207:			inverse_prev_bb_cost, inverse_prev_timing_cost,
        -: 1208:			delay_cost_ptr, x_lookup) == 1)
        -: 1209:		{
      138: 1210:		    num_accepted++;
      138: 1211:		    av += *cost_ptr;
      138: 1212:		    sum_of_squares += *cost_ptr * (*cost_ptr);
        -: 1213:		}
        -: 1214:	}
        -: 1215:
        1: 1216:    if(num_accepted != 0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 1217:	av /= num_accepted;
        -: 1218:    else
    #####: 1219:	av = 0.;
        -: 1220:
        1: 1221:    std_dev = get_std_dev(num_accepted, sum_of_squares, av);
call    0 returned 100%
        -: 1222:
        -: 1223:#ifdef DEBUG
        1: 1224:    if(num_accepted != move_lim)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1225:	{
    #####: 1226:	    printf
call    0 never executed
        -: 1227:		("Warning:  Starting t: %d of %d configurations accepted.\n",
        -: 1228:		 num_accepted, move_lim);
        -: 1229:	}
        -: 1230:#endif
        -: 1231:
        -: 1232:#ifdef VERBOSE
        -: 1233:    printf("std_dev: %g, average cost: %g, starting temp: %g\n",
        -: 1234:	   std_dev, av, 20. * std_dev);
        -: 1235:#endif
        -: 1236:
        1: 1237:    free(x_lookup);
        -: 1238:
        -: 1239:    /* Set the initial temperature to 20 times the standard of deviation */
        -: 1240:    /* so that the initial temperature adjusts according to the circuit */
        1: 1241:    return (20. * std_dev);
        -: 1242:}
        -: 1243:
        -: 1244:
        -: 1245:static int
function try_swap called 869998 returned 100% blocks executed 87%
   869998: 1246:try_swap(float t,
        -: 1247:	 float *cost,
        -: 1248:	 float *bb_cost,
        -: 1249:	 float *timing_cost,
        -: 1250:	 float rlim,
        -: 1251:	 int place_cost_type,
        -: 1252:	 float **old_region_occ_x,
        -: 1253:	 float **old_region_occ_y,
        -: 1254:	 int num_regions,
        -: 1255:	 boolean fixed_pins,
        -: 1256:	 enum e_place_algorithm place_algorithm,
        -: 1257:	 float timing_tradeoff,
        -: 1258:	 float inverse_prev_bb_cost,
        -: 1259:	 float inverse_prev_timing_cost,
        -: 1260:	 float *delay_cost,
        -: 1261:	 int *x_lookup)
        -: 1262:{
        -: 1263:
        -: 1264:    /* Picks some block and moves it to another spot.  If this spot is   *
        -: 1265:     * occupied, switch the blocks.  Assess the change in cost function  *
        -: 1266:     * and accept or reject the move.  If rejected, return 0.  If        *
        -: 1267:     * accepted return 1.  Pass back the new value of the cost function. * 
        -: 1268:     * rlim is the range limiter.                                                                            */
        -: 1269:
        -: 1270:    int b_from, x_to, y_to, z_to, x_from, y_from, z_from, b_to;
        -: 1271:    int i, k, inet, keep_switch, num_of_pins, max_pins_per_fb;
        -: 1272:    int num_nets_affected, bb_index;
        -: 1273:    float delta_c, bb_delta_c, timing_delta_c, delay_delta_c, newcost;
        -: 1274:    static struct s_bb *bb_coord_new = NULL;
        -: 1275:    static struct s_bb *bb_edge_new = NULL;
        -: 1276:    static int *nets_to_update = NULL, *net_block_moved = NULL;
        -: 1277:
   869998: 1278:    max_pins_per_fb = 0;
  4349990: 1279:    for(i = 0; i < num_types; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -: 1280:	{
  3479992: 1281:	    max_pins_per_fb =
  3479992: 1282:		max(max_pins_per_fb, type_descriptors[i].num_pins);
        -: 1283:	}
        -: 1284:
        -: 1285:    /* Allocate the local bb_coordinate storage, etc. only once. */
        -: 1286:
   869998: 1287:    if(bb_coord_new == NULL)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -: 1288:	{
        1: 1289:	    bb_coord_new = (struct s_bb *)my_malloc(2 * max_pins_per_fb * //opt
call    0 returned 100%
        -: 1290:						    sizeof(struct s_bb));
        1: 1291:	    bb_edge_new = (struct s_bb *)my_malloc(2 * max_pins_per_fb *
call    0 returned 100%
        -: 1292:						   sizeof(struct s_bb));
        1: 1293:	    nets_to_update =
        1: 1294:		(int *)my_malloc(2 * max_pins_per_fb * sizeof(int)); //opt
call    0 returned 100%
        1: 1295:	    net_block_moved =
        1: 1296:		(int *)my_malloc(2 * max_pins_per_fb * sizeof(int));
call    0 returned 100%
        -: 1297:	}
        -: 1298:
        -: 1299:
   869998: 1300:    delay_delta_c = 0.0;
   869998: 1301:    b_from = my_irand(num_blocks - 1);
call    0 returned 100%
        -: 1302:
        -: 1303:    /* If the pins are fixed we never move them from their initial    *
        -: 1304:     * random locations.  The code below could be made more efficient *
        -: 1305:     * by using the fact that pins appear first in the block list,    *
        -: 1306:     * but this shouldn't cause any significant slowdown and won't be *
        -: 1307:     * broken if I ever change the parser so that the pins aren't     *
        -: 1308:     * necessarily at the start of the block list.                    */
        -: 1309:
   869998: 1310:    if(fixed_pins == TRUE)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1311:	{
    #####: 1312:	    while(block[b_from].type == IO_TYPE)
branch  0 never executed
branch  1 never executed
        -: 1313:		{
    #####: 1314:		    b_from = my_irand(num_blocks - 1);
call    0 never executed
        -: 1315:		}
        -: 1316:	}
        -: 1317:
   869998: 1318:    x_from = block[b_from].x;
   869998: 1319:    y_from = block[b_from].y;
   869998: 1320:    z_from = block[b_from].z;
        -: 1321:
   869998: 1322:    if(!find_to
call    0 returned 100%
branch  1 taken 3% (fallthrough)
branch  2 taken 97%
   869998: 1323:       (x_from, y_from, block[b_from].type, rlim, x_lookup, &x_to, &y_to))
    21852: 1324:	return FALSE;
        -: 1325:
        -: 1326:    /* Make the switch in order to make computing the new bounding *
        -: 1327:     * box simpler.  If the cost increase is too high, switch them *
        -: 1328:     * back.  (block data structures switched, clbs not switched   *
        -: 1329:     * until success of move is determined.)                       */
        -: 1330:
        -: 1331:    
        -: 1332:    //opt grid[x_to][y_to] is used frequently but never aliasing
        -: 1333:    //no subroutine that might bring side effect in the function. 
   848146: 1334:    z_to = 0;
   848146: 1335:    if(grid[x_to][y_to].type->capacity > 1)
branch  0 taken 47% (fallthrough)
branch  1 taken 53%
        -: 1336:	{
   397393: 1337:	    z_to = my_irand(grid[x_to][y_to].type->capacity - 1);
call    0 returned 100%
        -: 1338:	}
   848146: 1339:    if(grid[x_to][y_to].blocks[z_to] == EMPTY)
branch  0 taken 21% (fallthrough)
branch  1 taken 79%
        -: 1340:	{			/* Moving to an empty location */
   177570: 1341:	    b_to = EMPTY;
   177570: 1342:	    block[b_from].x = x_to;
   177570: 1343:	    block[b_from].y = y_to;
   177570: 1344:	    block[b_from].z = z_to;
        -: 1345:	}
        -: 1346:    else
        -: 1347:	{			/* Swapping two blocks */
   670576: 1348:	    b_to = grid[x_to][y_to].blocks[z_to];
   670576: 1349:	    block[b_to].x = x_from;
   670576: 1350:	    block[b_to].y = y_from;
   670576: 1351:	    block[b_to].z = z_from;
        -: 1352:
   670576: 1353:	    block[b_from].x = x_to;
   670576: 1354:	    block[b_from].y = y_to;
   670576: 1355:	    block[b_from].z = z_to;
        -: 1356:	}
        -: 1357:
        -: 1358:    /* Now update the cost function.  May have to do major optimizations *
        -: 1359:     * here later.                                                       */
        -: 1360:
        -: 1361:    /* I'm using negative values of temp_net_cost as a flag, so DO NOT   *
        -: 1362:     * use cost functions that can go negative.                          */
        -: 1363:
   848146: 1364:    delta_c = 0;		/* Change in cost due to this swap. */
   848146: 1365:    bb_delta_c = 0;
   848146: 1366:    timing_delta_c = 0;
        -: 1367:
   848146: 1368:    num_of_pins = block[b_from].type->num_pins;
        -: 1369:
   848146: 1370:    num_nets_affected = find_affected_nets(nets_to_update, net_block_moved,
call    0 returned 100%
        -: 1371:					   b_from, b_to, num_of_pins);
        -: 1372:
   848146: 1373:    if(place_cost_type == NONLINEAR_CONG)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1374:	{
    #####: 1375:	    save_region_occ(old_region_occ_x, old_region_occ_y, num_regions);
call    0 never executed
        -: 1376:	}
        -: 1377:
   848146: 1378:    bb_index = 0;		/* Index of new bounding box. */
        -: 1379:
 17855734: 1380:    for(k = 0; k < num_nets_affected; k++)
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -: 1381:	{
 17007588: 1382:	    inet = nets_to_update[k];
        -: 1383:
        -: 1384:	    /* If we swapped two blocks connected to the same net, its bounding box *
        -: 1385:	     * doesn't change.                                                      */
        -: 1386:
 17007588: 1387:	    if(net_block_moved[k] == FROM_AND_TO)
branch  0 taken 8% (fallthrough)
branch  1 taken 92%
  1370823: 1388:		continue;
        -: 1389:
 15636765: 1390:	    if(net[inet].num_sinks < SMALL_NET)
branch  0 taken 81% (fallthrough)
branch  1 taken 19%
        -: 1391:		{
 12628718: 1392:		    get_non_updateable_bb(inet, &bb_coord_new[bb_index]);
call    0 returned 100%
        -: 1393:		}
        -: 1394:	    else
        -: 1395:		{
        -: 1396:                
  3008047: 1397:		    if(net_block_moved[k] == FROM)
branch  0 taken 53% (fallthrough)
branch  1 taken 47%
  3173710: 1398:			update_bb(inet, &bb_coord_new[bb_index],
call    0 returned 100%
  1586855: 1399:				  &bb_edge_new[bb_index], x_from, y_from,
        -: 1400:				  x_to, y_to);
        -: 1401:		    else
  2842384: 1402:			update_bb(inet, &bb_coord_new[bb_index],
call    0 returned 100%
  1421192: 1403:				  &bb_edge_new[bb_index], x_to, y_to, x_from,
        -: 1404:				  y_from);
        -: 1405:                
        -: 1406:		}
        -: 1407:
 15636765: 1408:	    if(place_cost_type != NONLINEAR_CONG)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1409:		{
 31273530: 1410:		    temp_net_cost[inet] =
 15636765: 1411:			get_net_cost(inet, &bb_coord_new[bb_index]);
call    0 returned 100%
 15636765: 1412:		    bb_delta_c += temp_net_cost[inet] - net_cost[inet];
        -: 1413:		}
        -: 1414:	    else
        -: 1415:		{
        -: 1416:		    /* Rip up, then replace with new bb. */
    #####: 1417:		    update_region_occ(inet, &bb_coords[inet], -1,
call    0 never executed
        -: 1418:				      num_regions);
    #####: 1419:		    update_region_occ(inet, &bb_coord_new[bb_index], 1,
call    0 never executed
        -: 1420:				      num_regions);
        -: 1421:		}
        -: 1422:
 15636765: 1423:	    bb_index++;
        -: 1424:	}
        -: 1425:
   848146: 1426:    if(place_cost_type == NONLINEAR_CONG)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1427:	{
    #####: 1428:	    newcost = nonlinear_cong_cost(num_regions);
call    0 never executed
    #####: 1429:	    bb_delta_c = newcost - *bb_cost;
        -: 1430:	}
        -: 1431:
        -: 1432:
   848146: 1433:    if(place_algorithm == NET_TIMING_DRIVEN_PLACE ||
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        -: 1434:       place_algorithm == PATH_TIMING_DRIVEN_PLACE)
        -: 1435:	{
        -: 1436:	    /*in this case we redefine delta_c as a combination of timing and bb.  *
        -: 1437:	     *additionally, we normalize all values, therefore delta_c is in       *
        -: 1438:	     *relation to 1*/
        -: 1439:
   848146: 1440:	    comp_delta_td_cost(b_from, b_to, num_of_pins, &timing_delta_c,
call    0 returned 100%
        -: 1441:			       &delay_delta_c);
        -: 1442:
   848146: 1443:	    delta_c =
   848146: 1444:		(1 - timing_tradeoff) * bb_delta_c * inverse_prev_bb_cost +
   848146: 1445:		timing_tradeoff * timing_delta_c * inverse_prev_timing_cost;
        -: 1446:	}
        -: 1447:    else
        -: 1448:	{
    #####: 1449:	    delta_c = bb_delta_c;
        -: 1450:	}
        -: 1451:
        -: 1452:
   848146: 1453:    keep_switch = assess_swap(delta_c, t);
call    0 returned 100%
        -: 1454:
        -: 1455:    /* 1 -> move accepted, 0 -> rejected. */
        -: 1456:
   848146: 1457:    if(keep_switch)
branch  0 taken 46% (fallthrough)
branch  1 taken 54%
        -: 1458:	{
   386965: 1459:	    *cost = *cost + delta_c;
   386965: 1460:	    *bb_cost = *bb_cost + bb_delta_c;
        -: 1461:
        -: 1462:
   386965: 1463:	    if(place_algorithm == NET_TIMING_DRIVEN_PLACE ||
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        -: 1464:	       place_algorithm == PATH_TIMING_DRIVEN_PLACE)
        -: 1465:		{
        -: 1466:		    /*update the point_to_point_timing_cost and point_to_point_delay_cost 
        -: 1467:		     * values from the temporary values */
   386965: 1468:		    *timing_cost = *timing_cost + timing_delta_c;
   386965: 1469:		    *delay_cost = *delay_cost + delay_delta_c;
        -: 1470:
   386965: 1471:		    update_td_cost(b_from, b_to, num_of_pins);
call    0 returned 100%
        -: 1472:		}
        -: 1473:
        -: 1474:	    /* update net cost functions and reset flags. */
        -: 1475:
   386965: 1476:	    bb_index = 0;
        -: 1477:
  4206708: 1478:	    for(k = 0; k < num_nets_affected; k++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -: 1479:		{
  3819743: 1480:		    inet = nets_to_update[k];
        -: 1481:
        -: 1482:		    /* If we swapped two blocks connected to the same net, its bounding box *
        -: 1483:		     * doesn't change.                                                      */
        -: 1484:
  3819743: 1485:		    if(net_block_moved[k] == FROM_AND_TO) 
branch  0 taken 7% (fallthrough)
branch  1 taken 93%
        -: 1486:			{
   249425: 1487:			    temp_net_cost[inet] = -1;
   249425: 1488:			    continue;
        -: 1489:			}
        -: 1490:
  3570318: 1491:		    bb_coords[inet] = bb_coord_new[bb_index];
  3570318: 1492:		    if(net[inet].num_sinks >= SMALL_NET)
branch  0 taken 22% (fallthrough)
branch  1 taken 78%
   780989: 1493:			bb_num_on_edges[inet] = bb_edge_new[bb_index];
        -: 1494:
  3570318: 1495:		    bb_index++;
        -: 1496:
  3570318: 1497:		    net_cost[inet] = temp_net_cost[inet];
  3570318: 1498:		    temp_net_cost[inet] = -1;
        -: 1499:		}
        -: 1500:
        -: 1501:	    /* Update fb data structures since we kept the move. */
        -: 1502:	    /* Swap physical location */
   386965: 1503:	    grid[x_to][y_to].blocks[z_to] = b_from;
   386965: 1504:	    grid[x_from][y_from].blocks[z_from] = b_to; //opt grid[from]???
        -: 1505:
   386965: 1506:	    if(EMPTY == b_to)
branch  0 taken 34% (fallthrough)
branch  1 taken 66%
        -: 1507:		{		/* Moved to an empty location */
   130769: 1508:		    grid[x_to][y_to].usage++;
   130769: 1509:		    grid[x_from][y_from].usage--;
        -: 1510:		}
        -: 1511:	}
        -: 1512:
        -: 1513:    else
        -: 1514:	{			/* Move was rejected.  */
        -: 1515:
        -: 1516:	    /* Reset the net cost function flags first. */
 13649026: 1517:	    for(k = 0; k < num_nets_affected; k++)
branch  0 taken 97%
branch  1 taken 3% (fallthrough)
        -: 1518:		{
 13187845: 1519:		    inet = nets_to_update[k];
 13187845: 1520:		    temp_net_cost[inet] = -1;
        -: 1521:		}
        -: 1522:
        -: 1523:	    /* Restore the block data structures to their state before the move. */
   461181: 1524:	    block[b_from].x = x_from;
   461181: 1525:	    block[b_from].y = y_from;
   461181: 1526:	    block[b_from].z = z_from;
   461181: 1527:	    if(b_to != EMPTY)
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
        -: 1528:		{
   414380: 1529:		    block[b_to].x = x_to;
   414380: 1530:		    block[b_to].y = y_to;
   414380: 1531:		    block[b_to].z = z_to;
        -: 1532:		}
        -: 1533:
        -: 1534:	    /* Restore the region occupancies to their state before the move. */
   461181: 1535:	    if(place_cost_type == NONLINEAR_CONG)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1536:		{
    #####: 1537:		    restore_region_occ(old_region_occ_x, old_region_occ_y,
call    0 never executed
        -: 1538:				       num_regions);
        -: 1539:		}
        -: 1540:	}
        -: 1541:
   848146: 1542:    return (keep_switch);
        -: 1543:}
        -: 1544:
        -: 1545:
        -: 1546:static void
function save_region_occ called 0 returned 0% blocks executed 0%
    #####: 1547:save_region_occ(float **old_region_occ_x,
        -: 1548:		float **old_region_occ_y,
        -: 1549:		int num_regions)
        -: 1550:{
        -: 1551:
        -: 1552:    /* Saves the old occupancies of the placement subregions in case the  *
        -: 1553:     * current move is not accepted.  Used only for NONLINEAR_CONG.       */
        -: 1554:
        -: 1555:    int i, j;
        -: 1556:
    #####: 1557:    for(i = 0; i < num_regions; i++)
branch  0 never executed
branch  1 never executed
        -: 1558:	{
    #####: 1559:	    for(j = 0; j < num_regions; j++)
branch  0 never executed
branch  1 never executed
        -: 1560:		{
    #####: 1561:		    old_region_occ_x[i][j] = place_region_x[i][j].occupancy;
    #####: 1562:		    old_region_occ_y[i][j] = place_region_y[i][j].occupancy;
        -: 1563:		}
        -: 1564:	}
    #####: 1565:}
        -: 1566:
        -: 1567:
        -: 1568:static void
function restore_region_occ called 0 returned 0% blocks executed 0%
    #####: 1569:restore_region_occ(float **old_region_occ_x,
        -: 1570:		   float **old_region_occ_y,
        -: 1571:		   int num_regions)
        -: 1572:{
        -: 1573:
        -: 1574:    /* Restores the old occupancies of the placement subregions when the  *
        -: 1575:     * current move is not accepted.  Used only for NONLINEAR_CONG.       */
        -: 1576:
        -: 1577:    int i, j;
        -: 1578:
    #####: 1579:    for(i = 0; i < num_regions; i++)
branch  0 never executed
branch  1 never executed
        -: 1580:	{
    #####: 1581:	    for(j = 0; j < num_regions; j++)
branch  0 never executed
branch  1 never executed
        -: 1582:		{
    #####: 1583:		    place_region_x[i][j].occupancy = old_region_occ_x[i][j];
    #####: 1584:		    place_region_y[i][j].occupancy = old_region_occ_y[i][j];
        -: 1585:		}
        -: 1586:	}
    #####: 1587:}
        -: 1588:
        -: 1589:
        -: 1590:static int
function find_affected_nets called 848146 returned 100% blocks executed 94%
   848146: 1591:find_affected_nets(int *nets_to_update,
        -: 1592:		   int *net_block_moved,
        -: 1593:		   int b_from,
        -: 1594:		   int b_to,
        -: 1595:		   int num_of_pins)
        -: 1596:{
        -: 1597:
        -: 1598:    /* Puts a list of all the nets connected to b_from and b_to into          *
        -: 1599:     * nets_to_update.  Returns the number of affected nets.  Net_block_moved *
        -: 1600:     * is either FROM, TO or FROM_AND_TO -- the block connected to this net   *
        -: 1601:     * that has moved.                                                        */
        -: 1602:
        -: 1603:    int k, inet, affected_index, count;
        -: 1604:
   848146: 1605:    affected_index = 0;
        -: 1606:
 20058892: 1607:    for(k = 0; k < num_of_pins; k++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -: 1608:	{
 19210746: 1609:	    inet = block[b_from].nets[k];
        -: 1610:
 19210746: 1611:	    if(inet == OPEN)
branch  0 taken 47% (fallthrough)
branch  1 taken 53%
  9068900: 1612:		continue;
        -: 1613:
 10141846: 1614:	    if(net[inet].is_global)
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
   390178: 1615:		continue;
        -: 1616:
        -: 1617:	    /* This is here in case the same block connects to a net twice. */
        -: 1618:
  9751668: 1619:	    if(temp_net_cost[inet] > 0.)
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
   367872: 1620:		continue;
        -: 1621:
  9383796: 1622:	    nets_to_update[affected_index] = inet;
  9383796: 1623:	    net_block_moved[affected_index] = FROM;
  9383796: 1624:	    affected_index++;
  9383796: 1625:	    temp_net_cost[inet] = 1.;	/* Flag to say we've marked this net. */
        -: 1626:	}
        -: 1627:
   848146: 1628:    if(b_to != EMPTY)
branch  0 taken 79% (fallthrough)
branch  1 taken 21%
        -: 1629:	{
 17675512: 1630:	    for(k = 0; k < num_of_pins; k++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -: 1631:		{
 17004936: 1632:		    inet = block[b_to].nets[k];
        -: 1633:
 17004936: 1634:		    if(inet == OPEN)
branch  0 taken 44% (fallthrough)
branch  1 taken 56%
  7441852: 1635:			continue;
        -: 1636:
  9563084: 1637:		    if(net[inet].is_global)
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
   381772: 1638:			continue;
        -: 1639:
  9181312: 1640:		    if(temp_net_cost[inet] > 0.)
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
        -: 1641:			{	/* Net already marked. */
 12948802: 1642:			    for(count = 0; count < affected_index; count++)
branch  0 taken 100%
branch  1 taken 0% (fallthrough)
        -: 1643:				{
 12948802: 1644:				    if(nets_to_update[count] == inet)
branch  0 taken 12% (fallthrough)
branch  1 taken 88%
        -: 1645:					{
  1557520: 1646:					    if(net_block_moved[count] == FROM)
branch  0 taken 88% (fallthrough)
branch  1 taken 12%
  1370823: 1647:						net_block_moved[count] =
        -: 1648:						    FROM_AND_TO;
  1557520: 1649:					    break;
        -: 1650:					}
        -: 1651:				}
        -: 1652:
        -: 1653:#ifdef DEBUG
  1557520: 1654:			    if(count > affected_index)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1655:				{
    #####: 1656:				    printf
call    0 never executed
        -: 1657:					("Error in find_affected_nets -- count = %d,"
        -: 1658:					 " affected index = %d.\n", count,
        -: 1659:					 affected_index);
    #####: 1660:				    exit(1);
call    0 never executed
        -: 1661:				}
        -: 1662:#endif
        -: 1663:			}
        -: 1664:
        -: 1665:		    else
        -: 1666:			{	/* Net not marked yet. */
        -: 1667:
  7623792: 1668:			    nets_to_update[affected_index] = inet;
  7623792: 1669:			    net_block_moved[affected_index] = TO;
  7623792: 1670:			    affected_index++;
  7623792: 1671:			    temp_net_cost[inet] = 1.;	/* Flag means we've  marked net. */
        -: 1672:			}
        -: 1673:		}
        -: 1674:	}
        -: 1675:
   848146: 1676:    return (affected_index);
        -: 1677:}
        -: 1678:
        -: 1679:
        -: 1680:static boolean
function find_to called 869998 returned 100% blocks executed 89%
   869998: 1681:find_to(int x_from,
        -: 1682:	int y_from,
        -: 1683:	t_type_ptr type,
        -: 1684:	float rlim,
        -: 1685:	int *x_lookup,
        -: 1686:	int *x_to,
        -: 1687:	int *y_to)
        -: 1688:{
        -: 1689:
        -: 1690:    /* Returns the point to which I want to swap, properly range limited. 
        -: 1691:     * rlim must always be between 1 and nx (inclusive) for this routine  
        -: 1692:     * to work.  Assumes that a column only contains blocks of the same type.
        -: 1693:     */
        -: 1694:
        -: 1695:    int x_rel, y_rel, iside, iplace, rlx, rly, min_x, max_x, min_y, max_y;
        -: 1696:    int num_col_same_type, i, j;
        -: 1697:
   869998: 1698:    rlx = min(nx, rlim);	/* Only needed when nx < ny. */
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
   869998: 1699:    rly = min(ny, rlim);	/* Added rly for aspect_ratio != 1 case. */
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        -: 1700:
   869998: 1701:    min_x = max(1, x_from - rlx);
   869998: 1702:    max_x = min(nx, x_from + rlx);
   869998: 1703:    min_y = max(1, y_from - rly);
   869998: 1704:    max_y = min(ny, y_from + rly);
        -: 1705:
   869998: 1706:    num_col_same_type = 0;
   869998: 1707:    j = 0;
   869998: 1708:    if(type != IO_TYPE)
branch  0 taken 54% (fallthrough)
branch  1 taken 46%
        -: 1709:	{
  3562569: 1710:	    for(i = min_x; i <= max_x; i++)
branch  0 taken 87%
branch  1 taken 13% (fallthrough)
        -: 1711:		{
  3089964: 1712:		    if(grid[i][1].type == type)
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        -: 1713:			{
  2063464: 1714:			    num_col_same_type++;
  2063464: 1715:			    x_lookup[j] = i;
  2063464: 1716:			    j++;
        -: 1717:			}
        -: 1718:		}
   472605: 1719:	    assert(num_col_same_type != 0);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
   533364: 1720:	    if(num_col_same_type == 1 &&
branch  0 taken 13% (fallthrough)
branch  1 taken 87%
branch  2 taken 64% (fallthrough)
branch  3 taken 36%
    60759: 1721:	       ((((max_y - min_y) / type->height) - 1) <= 0
    38907: 1722:		|| type->height > (ny / 2)))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    21852: 1723:		return FALSE;
        -: 1724:	}
        -: 1725:
        -: 1726:#ifdef DEBUG
   848146: 1727:    if(rlx < 1 || rlx > nx)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -: 1728:	{
    #####: 1729:	    printf("Error in find_to: rlx = %d\n", rlx);
call    0 never executed
    #####: 1730:	    exit(1);
call    0 never executed
        -: 1731:	}
        -: 1732:#endif
        -: 1733:
        -: 1734:    do
        -: 1735:	{			/* Until (x_to, y_to) different from (x_from, y_from) */
  1031237: 1736:	    if(type == IO_TYPE)
branch  0 taken 48% (fallthrough)
branch  1 taken 52%
        -: 1737:		{		/* io_block to be moved. */
   491361: 1738:		    if(rlx >= nx)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
        -: 1739:			{
   133534: 1740:			    iside = my_irand(3);
call    0 returned 100%
        -: 1741:			    /*                              *
        -: 1742:			     *       +-----1----+           *
        -: 1743:			     *       |          |           *
        -: 1744:			     *       |          |           *
        -: 1745:			     *       0          2           *
        -: 1746:			     *       |          |           *
        -: 1747:			     *       |          |           *
        -: 1748:			     *       +-----3----+           *
        -: 1749:			     *                              */
   133534: 1750:			    switch (iside)
branch  0 taken 25%
branch  1 taken 25%
branch  2 taken 25%
branch  3 taken 25%
branch  4 taken 0%
        -: 1751:				{
        -: 1752:				case 0:
    33463: 1753:				    iplace = my_irand(ny - 1) + 1;
call    0 returned 100%
    33463: 1754:				    *x_to = 0;
    33463: 1755:				    *y_to = iplace;
    33463: 1756:				    break;
        -: 1757:				case 1:
    33614: 1758:				    iplace = my_irand(nx - 1) + 1;
call    0 returned 100%
    33614: 1759:				    *x_to = iplace;
    33614: 1760:				    *y_to = ny + 1;
    33614: 1761:				    break;
        -: 1762:				case 2:
    33127: 1763:				    iplace = my_irand(ny - 1) + 1;
call    0 returned 100%
    33127: 1764:				    *x_to = nx + 1;
    33127: 1765:				    *y_to = iplace;
    33127: 1766:				    break;
        -: 1767:				case 3:
    33330: 1768:				    iplace = my_irand(nx - 1) + 1;
call    0 returned 100%
    33330: 1769:				    *x_to = iplace;
    33330: 1770:				    *y_to = 0;
    33330: 1771:				    break;
        -: 1772:				default:
    #####: 1773:				    printf
call    0 never executed
        -: 1774:					("Error in find_to.  Unexpected io swap location.\n");
    #####: 1775:				    exit(1);
call    0 never executed
        -: 1776:				}
        -: 1777:			}
        -: 1778:		    else
        -: 1779:			{	/* rlx is less than whole chip */
   357827: 1780:			    if(x_from == 0)
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -: 1781:				{
   119587: 1782:				    iplace = my_irand(2 * rly);
call    0 returned 100%
   119587: 1783:				    *y_to = y_from - rly + iplace;
   119587: 1784:				    *x_to = x_from;
   119587: 1785:				    if(*y_to > ny)
branch  0 taken 7% (fallthrough)
branch  1 taken 93%
        -: 1786:					{
     8143: 1787:					    *y_to = ny + 1;
     8143: 1788:					    *x_to = my_irand(rlx - 1) + 1;
call    0 returned 100%
        -: 1789:					}
   111444: 1790:				    else if(*y_to < 1)
branch  0 taken 7% (fallthrough)
branch  1 taken 93%
        -: 1791:					{
     7550: 1792:					    *y_to = 0;
     7550: 1793:					    *x_to = my_irand(rlx - 1) + 1;
call    0 returned 100%
        -: 1794:					}
        -: 1795:				}
   238240: 1796:			    else if(x_from == nx + 1)
branch  0 taken 23% (fallthrough)
branch  1 taken 77%
        -: 1797:				{
    53795: 1798:				    iplace = my_irand(2 * rly);
call    0 returned 100%
    53795: 1799:				    *y_to = y_from - rly + iplace;
    53795: 1800:				    *x_to = x_from;
    53795: 1801:				    if(*y_to > ny)
branch  0 taken 10% (fallthrough)
branch  1 taken 90%
        -: 1802:					{
     5181: 1803:					    *y_to = ny + 1;
     5181: 1804:					    *x_to = nx - my_irand(rlx - 1);
call    0 returned 100%
        -: 1805:					}
    48614: 1806:				    else if(*y_to < 1)
branch  0 taken 9% (fallthrough)
branch  1 taken 91%
        -: 1807:					{
     4372: 1808:					    *y_to = 0;
     4372: 1809:					    *x_to = nx - my_irand(rlx - 1);
call    0 returned 100%
        -: 1810:					}
        -: 1811:				}
   184445: 1812:			    else if(y_from == 0)
branch  0 taken 41% (fallthrough)
branch  1 taken 59%
        -: 1813:				{
    75239: 1814:				    iplace = my_irand(2 * rlx);
call    0 returned 100%
    75239: 1815:				    *x_to = x_from - rlx + iplace;
    75239: 1816:				    *y_to = y_from;
    75239: 1817:				    if(*x_to > nx)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -: 1818:					{
     4370: 1819:					    *x_to = nx + 1;
     4370: 1820:					    *y_to = my_irand(rly - 1) + 1;
call    0 returned 100%
        -: 1821:					}
    70869: 1822:				    else if(*x_to < 1)
branch  0 taken 10% (fallthrough)
branch  1 taken 90%
        -: 1823:					{
     7252: 1824:					    *x_to = 0;
     7252: 1825:					    *y_to = my_irand(rly - 1) + 1;
call    0 returned 100%
        -: 1826:					}
        -: 1827:				}
        -: 1828:			    else
        -: 1829:				{	/* *y_from == ny + 1 */
   109206: 1830:				    iplace = my_irand(2 * rlx);
call    0 returned 100%
   109206: 1831:				    *x_to = x_from - rlx + iplace;
   109206: 1832:				    *y_to = y_from;
   109206: 1833:				    if(*x_to > nx)
branch  0 taken 5% (fallthrough)
branch  1 taken 95%
        -: 1834:					{
     5407: 1835:					    *x_to = nx + 1;
     5407: 1836:					    *y_to = ny - my_irand(rly - 1);
call    0 returned 100%
        -: 1837:					}
   103799: 1838:				    else if(*x_to < 1)
branch  0 taken 8% (fallthrough)
branch  1 taken 92%
        -: 1839:					{
     8233: 1840:					    *x_to = 0;
     8233: 1841:					    *y_to = ny - my_irand(rly - 1);
call    0 returned 100%
        -: 1842:					}
        -: 1843:				}
        -: 1844:			}	/* End rlx if */
        -: 1845:		}		/* end type if */
        -: 1846:	    else
        -: 1847:		{
   539876: 1848:		    x_rel = my_irand(num_col_same_type - 1);
call    0 returned 100%
   539876: 1849:		    y_rel =
call    0 returned 100%
   539876: 1850:			my_irand(max
        -: 1851:				 (0, ((max_y - min_y) / type->height) - 1));
   539876: 1852:		    *x_to = x_lookup[x_rel];
   539876: 1853:		    *y_to = min_y + y_rel * type->height;
   539876: 1854:		    *y_to = (*y_to) - grid[*x_to][*y_to].offset;	/* align it */
   539876: 1855:		    assert(*x_to >= 1 && *x_to <= nx);
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
   539876: 1856:		    assert(*y_to >= 1 && *y_to <= ny);
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
        -: 1857:		}
        -: 1858:	}
  1031237: 1859:    while((x_from == *x_to) && (y_from == *y_to));
branch  0 taken 41% (fallthrough)
branch  1 taken 59%
branch  2 taken 43%
branch  3 taken 57% (fallthrough)
        -: 1860:
        -: 1861:#ifdef DEBUG
   848146: 1862:    if(*x_to < 0 || *x_to > nx + 1 || *y_to < 0 || *y_to > ny + 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
        -: 1863:	{
    #####: 1864:	    printf("Error in routine find_to:  (x_to,y_to) = (%d,%d)\n",
call    0 never executed
        -: 1865:		   *x_to, *y_to);
    #####: 1866:	    exit(1);
call    0 never executed
        -: 1867:	}
        -: 1868:#endif
   848146: 1869:    assert(type == grid[*x_to][*y_to].type);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
   848146: 1870:    return TRUE;
        -: 1871:}
        -: 1872:
        -: 1873:
        -: 1874:static int
function assess_swap called 848146 returned 100% blocks executed 100%
   848146: 1875:assess_swap(float delta_c,
        -: 1876:	    float t)
        -: 1877:{
        -: 1878:
        -: 1879:    /* Returns: 1 -> move accepted, 0 -> rejected. */
        -: 1880:
        -: 1881:    int accept;
        -: 1882:    float prob_fac, fnum;
        -: 1883:
   848146: 1884:    if(delta_c <= 0)
branch  0 taken 24% (fallthrough)
branch  1 taken 76%
        -: 1885:	{
        -: 1886:
        -: 1887:#ifdef SPEC			/* Reduce variation in final solution due to round off */
        -: 1888:	    fnum = my_frand();
        -: 1889:#endif
        -: 1890:
   203537: 1891:	    accept = 1;
   203537: 1892:	    return (accept);
        -: 1893:	}
        -: 1894:
   644609: 1895:    if(t == 0.)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
     6361: 1896:	return (0);
        -: 1897:
   638248: 1898:    fnum = my_frand();
call    0 returned 100%
   638248: 1899:    prob_fac = exp(-delta_c / t);
   638248: 1900:    if(prob_fac > fnum)
branch  0 taken 29% (fallthrough)
branch  1 taken 71%
        -: 1901:	{
   183428: 1902:	    accept = 1;
        -: 1903:	}
        -: 1904:    else
        -: 1905:	{
   454820: 1906:	    accept = 0;
        -: 1907:	}
   638248: 1908:    return (accept);
        -: 1909:}
        -: 1910:
        -: 1911:
        -: 1912:static float
function recompute_bb_cost called 15 returned 100% blocks executed 56%
       15: 1913:recompute_bb_cost(int place_cost_type,
        -: 1914:		  int num_regions)
        -: 1915:{
        -: 1916:
        -: 1917:    /* Recomputes the cost to eliminate roundoff that may have accrued.  *
        -: 1918:     * This routine does as little work as possible to compute this new  *
        -: 1919:     * cost.                                                             */
        -: 1920:
        -: 1921:    int i, j, inet;
        -: 1922:    float cost;
        -: 1923:
       15: 1924:    cost = 0;
        -: 1925:
        -: 1926:    /* Initialize occupancies to zero if regions are being used. */
        -: 1927:
       15: 1928:    if(place_cost_type == NONLINEAR_CONG)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1929:	{
    #####: 1930:	    for(i = 0; i < num_regions; i++)
branch  0 never executed
branch  1 never executed
        -: 1931:		{
    #####: 1932:		    for(j = 0; j < num_regions; j++)
branch  0 never executed
branch  1 never executed
        -: 1933:			{
    #####: 1934:			    place_region_x[i][j].occupancy = 0.;
    #####: 1935:			    place_region_y[i][j].occupancy = 0.;
        -: 1936:			}
        -: 1937:		}
        -: 1938:	}
        -: 1939:
     7680: 1940:    for(inet = 0; inet < num_nets; inet++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -: 1941:	{			/* for each net ... */
        -: 1942:
     7665: 1943:	    if(net[inet].is_global == FALSE)
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
        -: 1944:		{		/* Do only if not global. */
        -: 1945:
        -: 1946:		    /* Bounding boxes don't have to be recomputed; they're correct. */
        -: 1947:
     7650: 1948:		    if(place_cost_type != NONLINEAR_CONG)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1949:			{
     7650: 1950:			    cost += net_cost[inet];
        -: 1951:			}
        -: 1952:		    else
        -: 1953:			{	/* Must be nonlinear_cong case. */
    #####: 1954:			    update_region_occ(inet, &bb_coords[inet], 1,
call    0 never executed
        -: 1955:					      num_regions);
        -: 1956:			}
        -: 1957:		}
        -: 1958:	}
        -: 1959:
       15: 1960:    if(place_cost_type == NONLINEAR_CONG)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1961:	{
    #####: 1962:	    cost = nonlinear_cong_cost(num_regions);
call    0 never executed
        -: 1963:	}
        -: 1964:
       15: 1965:    return (cost);
        -: 1966:}
        -: 1967:
        -: 1968:
        -: 1969:static float
function comp_td_point_to_point_delay called 25584958 returned 100% blocks executed 65%
 25584958: 1970:comp_td_point_to_point_delay(int inet,
        -: 1971:			     int ipin)
        -: 1972:{
        -: 1973:
        -: 1974:    /*returns the delay of one point to point connection */
        -: 1975:
        -: 1976:    int source_block, sink_block;
        -: 1977:    int delta_x, delta_y;
        -: 1978:    t_type_ptr source_type, sink_type;
        -: 1979:    float delay_source_to_sink;
        -: 1980:
 25584958: 1981:    delay_source_to_sink = 0.;
        -: 1982:
 25584958: 1983:    source_block = net[inet].node_block[0];
 25584958: 1984:    source_type = block[source_block].type;
        -: 1985:
 25584958: 1986:    sink_block = net[inet].node_block[ipin];
 25584958: 1987:    sink_type = block[sink_block].type;
        -: 1988:
 25584958: 1989:    assert(source_type != NULL);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
 25584958: 1990:    assert(sink_type != NULL);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 1991:
 25584958: 1992:    delta_x = abs(block[sink_block].x - block[source_block].x);
 25584958: 1993:    delta_y = abs(block[sink_block].y - block[source_block].y);
        -: 1994:
        -: 1995:    /* TODO low priority: Could be merged into one look-up table */
        -: 1996:    /* Note: This heuristic is terrible on Quality of Results.  
        -: 1997:     * A much better heuristic is to create a more comprehensive lookup table but
        -: 1998:     * it's too late in the release cycle to do this.  Pushing until the next release */
 25584958: 1999:    if(source_type == IO_TYPE)
branch  0 taken 18% (fallthrough)
branch  1 taken 82%
        -: 2000:	{
  4592870: 2001:	    if(sink_type == IO_TYPE)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 2002:		delay_source_to_sink = delta_io_to_io[delta_x][delta_y];
        -: 2003:	    else
  4592870: 2004:		delay_source_to_sink = delta_io_to_fb[delta_x][delta_y];
        -: 2005:	}
        -: 2006:    else
        -: 2007:	{
 20992088: 2008:	    if(sink_type == IO_TYPE)
branch  0 taken 3% (fallthrough)
branch  1 taken 97%
   617662: 2009:		delay_source_to_sink = delta_fb_to_io[delta_x][delta_y];
        -: 2010:	    else
 20374426: 2011:		delay_source_to_sink = delta_fb_to_fb[delta_x][delta_y];
        -: 2012:	}
 25584958: 2013:    if(delay_source_to_sink < 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 2014:	{
    #####: 2015:	    printf
call    0 never executed
        -: 2016:		("Error in comp_td_point_to_point_delay in place.c, bad delay_source_to_sink value\n");
    #####: 2017:	    exit(1);
call    0 never executed
        -: 2018:	}
        -: 2019:
 25584958: 2020:    if(delay_source_to_sink < 0.)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 2021:	{
    #####: 2022:	    printf
call    0 never executed
        -: 2023:		("Error in comp_td_point_to_point_delay in place.c, delay is less than 0\n");
    #####: 2024:	    exit(1);
call    0 never executed
        -: 2025:	}
        -: 2026:
 25584958: 2027:    return (delay_source_to_sink);
        -: 2028:}
        -: 2029:
        -: 2030:
        -: 2031:
        -: 2032:static void
function update_td_cost called 386965 returned 100% blocks executed 100%
   386965: 2033:update_td_cost(int b_from,
        -: 2034:	       int b_to,
        -: 2035:	       int num_of_pins)
        -: 2036:{
        -: 2037:    /*update the point_to_point_timing_cost values from the temporary */
        -: 2038:    /*values for all connections that have changed */
        -: 2039:
        -: 2040:    int blkpin, net_pin, inet, ipin;
        -: 2041:
  6286162: 2042:    for(blkpin = 0; blkpin < num_of_pins; blkpin++)
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -: 2043:	{
        -: 2044:
  5899197: 2045:	    inet = block[b_from].nets[blkpin];
        -: 2046:
  5899197: 2047:	    if(inet == OPEN)
branch  0 taken 61% (fallthrough)
branch  1 taken 39%
  3613976: 2048:		continue;
        -: 2049:
  2285221: 2050:	    if(net[inet].is_global)
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
    86060: 2051:		continue;
        -: 2052:
  2199161: 2053:	    net_pin = net_pin_index[b_from][blkpin];
        -: 2054:
  2199161: 2055:	    if(net_pin != 0)
branch  0 taken 68% (fallthrough)
branch  1 taken 32%
        -: 2056:		{
        -: 2057:
        -: 2058:		    /*the following "if" prevents the value from being updated twice */
  1485334: 2059:		    if(net[inet].node_block[0] != b_to
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
  1466161: 2060:		       && net[inet].node_block[0] != b_from)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 2061:			{
        -: 2062:
  2932322: 2063:			    point_to_point_delay_cost[inet][net_pin] =
  1466161: 2064:				temp_point_to_point_delay_cost[inet][net_pin];
  1466161: 2065:			    temp_point_to_point_delay_cost[inet][net_pin] =
        -: 2066:				-1;
        -: 2067:
  2932322: 2068:			    point_to_point_timing_cost[inet][net_pin] =
  1466161: 2069:				temp_point_to_point_timing_cost[inet]
  1466161: 2070:				[net_pin];
  1466161: 2071:			    temp_point_to_point_timing_cost[inet][net_pin] =
        -: 2072:				-1;
        -: 2073:			}
        -: 2074:		}
        -: 2075:	    else
        -: 2076:		{		/*this net is being driven by a moved block, recompute */
        -: 2077:		    /*all point to point connections on this net. */
  2926183: 2078:		    for(ipin = 1; ipin <= net[inet].num_sinks; ipin++)
branch  0 taken 76%
branch  1 taken 24% (fallthrough)
        -: 2079:			{
        -: 2080:
  4424712: 2081:			    point_to_point_delay_cost[inet][ipin] =
  2212356: 2082:				temp_point_to_point_delay_cost[inet][ipin];
  2212356: 2083:			    temp_point_to_point_delay_cost[inet][ipin] = -1;
        -: 2084:
  4424712: 2085:			    point_to_point_timing_cost[inet][ipin] =
  2212356: 2086:				temp_point_to_point_timing_cost[inet][ipin];
  2212356: 2087:			    temp_point_to_point_timing_cost[inet][ipin] = -1;
        -: 2088:			}
        -: 2089:		}
        -: 2090:	}
        -: 2091:
   386965: 2092:    if(b_to != EMPTY)
branch  0 taken 66% (fallthrough)
branch  1 taken 34%
        -: 2093:	{
  4864808: 2094:	    for(blkpin = 0; blkpin < num_of_pins; blkpin++)
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -: 2095:		{
        -: 2096:
  4608612: 2097:		    inet = block[b_to].nets[blkpin];
        -: 2098:
  4608612: 2099:		    if(inet == OPEN)
branch  0 taken 55% (fallthrough)
branch  1 taken 45%
  2537390: 2100:			continue;
        -: 2101:
  2071222: 2102:		    if(net[inet].is_global)
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
    82463: 2103:			continue;
        -: 2104:
  1988759: 2105:		    net_pin = net_pin_index[b_to][blkpin];
        -: 2106:
  1988759: 2107:		    if(net_pin != 0)
branch  0 taken 68% (fallthrough)
branch  1 taken 32%
        -: 2108:			{
        -: 2109:
        -: 2110:			    /*the following "if" prevents the value from being updated 2x */
  1361731: 2111:			    if(net[inet].node_block[0] != b_to
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
  1361731: 2112:			       && net[inet].node_block[0] != b_from)
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
        -: 2113:				{
        -: 2114:
  2684958: 2115:				    point_to_point_delay_cost[inet][net_pin] =
  1342479: 2116:					temp_point_to_point_delay_cost[inet]
  1342479: 2117:					[net_pin];
  1342479: 2118:				    temp_point_to_point_delay_cost[inet]
  1342479: 2119:					[net_pin] = -1;
        -: 2120:
  1342479: 2121:				    point_to_point_timing_cost[inet][net_pin]
  1342479: 2122:					=
  1342479: 2123:					temp_point_to_point_timing_cost[inet]
  1342479: 2124:					[net_pin];
  1342479: 2125:				    temp_point_to_point_timing_cost[inet]
  1342479: 2126:					[net_pin] = -1;
        -: 2127:				}
        -: 2128:			}
        -: 2129:		    else
        -: 2130:			{	/*this net is being driven by a moved block, recompute */
        -: 2131:			    /*all point to point connections on this net. */
  2254536: 2132:			    for(ipin = 1; ipin <= net[inet].num_sinks; ipin++)
branch  0 taken 72%
branch  1 taken 28% (fallthrough)
        -: 2133:				{
        -: 2134:
  3255016: 2135:				    point_to_point_delay_cost[inet][ipin] =
  1627508: 2136:					temp_point_to_point_delay_cost[inet]
  1627508: 2137:					[ipin];
  1627508: 2138:				    temp_point_to_point_delay_cost[inet][ipin]
  1627508: 2139:					= -1;
        -: 2140:
  3255016: 2141:				    point_to_point_timing_cost[inet][ipin] =
  1627508: 2142:					temp_point_to_point_timing_cost[inet]
  1627508: 2143:					[ipin];
  1627508: 2144:				    temp_point_to_point_timing_cost[inet]
  1627508: 2145:					[ipin] = -1;
        -: 2146:				}
        -: 2147:			}
        -: 2148:		}
        -: 2149:	}
   386965: 2150:}
        -: 2151:
        -: 2152:
        -: 2153:static void
function comp_delta_td_cost called 848146 returned 100% blocks executed 100%
   848146: 2154:comp_delta_td_cost(int b_from,
        -: 2155:		   int b_to,
        -: 2156:		   int num_of_pins,
        -: 2157:		   float *delta_timing,
        -: 2158:		   float *delta_delay)
        -: 2159:{
        -: 2160:
        -: 2161:    /*a net that is being driven by a moved block must have all of its  */
        -: 2162:    /*sink timing costs recomputed. A net that is driving a moved block */
        -: 2163:    /*must only have the timing cost on the connection driving the input */
        -: 2164:    /*pin computed */
        -: 2165:
        -: 2166:    int inet, k, net_pin, ipin;
        -: 2167:    float delta_timing_cost, delta_delay_cost, temp_delay;
        -: 2168:
   848146: 2169:    delta_timing_cost = 0.;
   848146: 2170:    delta_delay_cost = 0.;
        -: 2171:
        -: 2172:
 20058892: 2173:    for(k = 0; k < num_of_pins; k++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -: 2174:	{
 19210746: 2175:	    inet = block[b_from].nets[k];
        -: 2176:
 19210746: 2177:	    if(inet == OPEN)
branch  0 taken 47% (fallthrough)
branch  1 taken 53%
  9068900: 2178:		continue;
        -: 2179:
 10141846: 2180:	    if(net[inet].is_global)
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
   390178: 2181:		continue;
        -: 2182:
  9751668: 2183:	    net_pin = net_pin_index[b_from][k];
        -: 2184:
  9751668: 2185:	    if(net_pin != 0)
branch  0 taken 69% (fallthrough)
branch  1 taken 31%
        -: 2186:		{		/*this net is driving a moved block               */
        -: 2187:
        -: 2188:		    /*if this net is being driven by a block that has moved, we do not  */
        -: 2189:		    /*need to compute the change in the timing cost (here) since it will */
        -: 2190:		    /*be computed in the fanout of the net on  the driving block, also  */
        -: 2191:		    /*computing it here would double count the change, and mess up the  */
        -: 2192:		    /*delta_timing_cost value */
  6724811: 2193:		    if(net[inet].node_block[0] != b_to
branch  0 taken 98% (fallthrough)
branch  1 taken 2%
  6572710: 2194:		       && net[inet].node_block[0] != b_from)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 2195:			{
  6572710: 2196:			    temp_delay =
call    0 returned 100%
        -: 2197:				comp_td_point_to_point_delay(inet, net_pin);
        -: 2198:
  6572710: 2199:			    temp_point_to_point_delay_cost[inet][net_pin] =
        -: 2200:				temp_delay;
 13145420: 2201:			    temp_point_to_point_timing_cost[inet][net_pin] =
  6572710: 2202:				timing_place_crit[inet][net_pin] * temp_delay;
        -: 2203:
  6572710: 2204:			    delta_delay_cost +=
  6572710: 2205:				temp_point_to_point_delay_cost[inet][net_pin]
  6572710: 2206:				- point_to_point_delay_cost[inet][net_pin];
        -: 2207:
  6572710: 2208:			    delta_timing_cost +=
  6572710: 2209:				temp_point_to_point_timing_cost[inet][net_pin]
  6572710: 2210:				- point_to_point_timing_cost[inet][net_pin];
        -: 2211:			}
        -: 2212:		}
        -: 2213:	    else
        -: 2214:		{		/*this net is being driven by a moved block, recompute */
        -: 2215:		    /*all point to point connections on this net. */
  9682637: 2216:		    for(ipin = 1; ipin <= net[inet].num_sinks; ipin++)
branch  0 taken 69%
branch  1 taken 31% (fallthrough)
        -: 2217:			{
  6655780: 2218:			    temp_delay =
call    0 returned 100%
        -: 2219:				comp_td_point_to_point_delay(inet, ipin);
        -: 2220:
  6655780: 2221:			    temp_point_to_point_delay_cost[inet][ipin] =
        -: 2222:				temp_delay;
 13311560: 2223:			    temp_point_to_point_timing_cost[inet][ipin] =
  6655780: 2224:				timing_place_crit[inet][ipin] * temp_delay;
        -: 2225:
  6655780: 2226:			    delta_delay_cost +=
 13311560: 2227:				temp_point_to_point_delay_cost[inet][ipin] -
  6655780: 2228:				point_to_point_delay_cost[inet][ipin];
        -: 2229:
  6655780: 2230:			    delta_timing_cost +=
 13311560: 2231:				temp_point_to_point_timing_cost[inet][ipin] -
  6655780: 2232:				point_to_point_timing_cost[inet][ipin];
        -: 2233:			}
        -: 2234:		}
        -: 2235:	}
        -: 2236:
   848146: 2237:    if(b_to != EMPTY)
branch  0 taken 79% (fallthrough)
branch  1 taken 21%
        -: 2238:	{
 17675512: 2239:	    for(k = 0; k < num_of_pins; k++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -: 2240:		{
 17004936: 2241:		    inet = block[b_to].nets[k];
        -: 2242:
 17004936: 2243:		    if(inet == OPEN)
branch  0 taken 44% (fallthrough)
branch  1 taken 56%
  7441852: 2244:			continue;
        -: 2245:
  9563084: 2246:		    if(net[inet].is_global)
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
   381772: 2247:			continue;
        -: 2248:
  9181312: 2249:		    net_pin = net_pin_index[b_to][k];
        -: 2250:
  9181312: 2251:		    if(net_pin != 0)
branch  0 taken 68% (fallthrough)
branch  1 taken 32%
        -: 2252:			{	/*this net is driving a moved block */
        -: 2253:
        -: 2254:			    /*if this net is being driven by a block that has moved, we do not */
        -: 2255:			    /*need to compute the change in the timing cost (here) since it was */
        -: 2256:			    /*computed in the fanout of the net on  the driving block, also    */
        -: 2257:			    /*computing it here would double count the change, and mess up the */
        -: 2258:			    /*delta_timing_cost value */
  6279756: 2259:			    if(net[inet].node_block[0] != b_to
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
  6279756: 2260:			       && net[inet].node_block[0] != b_from)
branch  0 taken 97% (fallthrough)
branch  1 taken 3%
        -: 2261:				{
  6099020: 2262:				    temp_delay =
call    0 returned 100%
        -: 2263:					comp_td_point_to_point_delay(inet,
        -: 2264:								     net_pin);
        -: 2265:
  6099020: 2266:				    temp_point_to_point_delay_cost[inet]
  6099020: 2267:					[net_pin] = temp_delay;
  6099020: 2268:				    temp_point_to_point_timing_cost[inet]
 12198040: 2269:					[net_pin] =
  6099020: 2270:					timing_place_crit[inet][net_pin] *
        -: 2271:					temp_delay;
        -: 2272:
  6099020: 2273:				    delta_delay_cost +=
  6099020: 2274:					temp_point_to_point_delay_cost[inet]
 12198040: 2275:					[net_pin] -
  6099020: 2276:					point_to_point_delay_cost[inet]
  6099020: 2277:					[net_pin];
  6099020: 2278:				    delta_timing_cost +=
  6099020: 2279:					temp_point_to_point_timing_cost[inet]
 12198040: 2280:					[net_pin] -
  6099020: 2281:					point_to_point_timing_cost[inet]
  6099020: 2282:					[net_pin];
        -: 2283:				}
        -: 2284:			}
        -: 2285:		    else
        -: 2286:			{	/*this net is being driven by a moved block, recompute */
        -: 2287:			    /*all point to point connections on this net. */
  8999015: 2288:			    for(ipin = 1; ipin <= net[inet].num_sinks; ipin++)
branch  0 taken 68%
branch  1 taken 32% (fallthrough)
        -: 2289:				{
        -: 2290:
  6097459: 2291:				    temp_delay =
call    0 returned 100%
        -: 2292:					comp_td_point_to_point_delay(inet,
        -: 2293:								     ipin);
        -: 2294:
  6097459: 2295:				    temp_point_to_point_delay_cost[inet][ipin]
  6097459: 2296:					= temp_delay;
  6097459: 2297:				    temp_point_to_point_timing_cost[inet]
 12194918: 2298:					[ipin] =
  6097459: 2299:					timing_place_crit[inet][ipin] *
        -: 2300:					temp_delay;
        -: 2301:
        -: 2302:
  6097459: 2303:				    delta_delay_cost +=
  6097459: 2304:					temp_point_to_point_delay_cost[inet]
 12194918: 2305:					[ipin] -
  6097459: 2306:					point_to_point_delay_cost[inet][ipin];
  6097459: 2307:				    delta_timing_cost +=
  6097459: 2308:					temp_point_to_point_timing_cost[inet]
 12194918: 2309:					[ipin] -
  6097459: 2310:					point_to_point_timing_cost[inet]
  6097459: 2311:					[ipin];
        -: 2312:				}
        -: 2313:			}
        -: 2314:		}
        -: 2315:	}
        -: 2316:
   848146: 2317:    *delta_timing = delta_timing_cost;
   848146: 2318:    *delta_delay = delta_delay_cost;
   848146: 2319:}
        -: 2320:
        -: 2321:static void
function comp_td_costs called 139 returned 100% blocks executed 100%
      139: 2322:comp_td_costs(float *timing_cost,
        -: 2323:	      float *connection_delay_sum)
        -: 2324:{
        -: 2325:    /*computes the cost (from scratch) due to the delays and criticalities*
        -: 2326:     *on all point to point connections, we define the timing cost of     *
        -: 2327:     *each connection as criticality*delay */
        -: 2328:
        -: 2329:    int inet, ipin;
        -: 2330:    float loc_timing_cost, loc_connection_delay_sum, temp_delay_cost,
        -: 2331:	temp_timing_cost;
        -: 2332:
      139: 2333:    loc_timing_cost = 0.;
      139: 2334:    loc_connection_delay_sum = 0.;
        -: 2335:
    71168: 2336:    for(inet = 0; inet < num_nets; inet++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -: 2337:	{			/* for each net ... */
    71029: 2338:	    if(net[inet].is_global == FALSE)
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
        -: 2339:		{		/* Do only if not global. */
        -: 2340:
   230879: 2341:		    for(ipin = 1; ipin <= net[inet].num_sinks; ipin++)
branch  0 taken 69%
branch  1 taken 31% (fallthrough)
        -: 2342:			{
        -: 2343:
   159989: 2344:			    temp_delay_cost =
call    0 returned 100%
        -: 2345:				comp_td_point_to_point_delay(inet, ipin);
   159989: 2346:			    temp_timing_cost =
        -: 2347:				temp_delay_cost *
   159989: 2348:				timing_place_crit[inet][ipin];
        -: 2349:
   159989: 2350:			    loc_connection_delay_sum += temp_delay_cost;
   159989: 2351:			    point_to_point_delay_cost[inet][ipin] =
        -: 2352:				temp_delay_cost;
   159989: 2353:			    temp_point_to_point_delay_cost[inet][ipin] = -1;	/*undefined */
        -: 2354:
   159989: 2355:			    point_to_point_timing_cost[inet][ipin] =
        -: 2356:				temp_timing_cost;
   159989: 2357:			    temp_point_to_point_timing_cost[inet][ipin] = -1;	/*undefined */
   159989: 2358:			    loc_timing_cost += temp_timing_cost;
        -: 2359:			}
        -: 2360:		}
        -: 2361:	}
      139: 2362:    *timing_cost = loc_timing_cost;
      139: 2363:    *connection_delay_sum = loc_connection_delay_sum;
      139: 2364:}
        -: 2365:
        -: 2366:
        -: 2367:static float
function comp_bb_cost called 2 returned 100% blocks executed 71%
        2: 2368:comp_bb_cost(int method,
        -: 2369:	     int place_cost_type,
        -: 2370:	     int num_regions)
        -: 2371:{
        -: 2372:
        -: 2373:    /* Finds the cost from scratch.  Done only when the placement   *
        -: 2374:     * has been radically changed (i.e. after initial placement).   *
        -: 2375:     * Otherwise find the cost change incrementally.  If method     *
        -: 2376:     * check is NORMAL, we find bounding boxes that are updateable  *
        -: 2377:     * for the larger nets.  If method is CHECK, all bounding boxes *
        -: 2378:     * are found via the non_updateable_bb routine, to provide a    *
        -: 2379:     * cost which can be used to check the correctness of the       *
        -: 2380:     * other routine.                                               */
        -: 2381:
        -: 2382:    int i, j, k;
        -: 2383:    float cost;
        -: 2384:    double expected_wirelength;
        -: 2385:
        2: 2386:    cost = 0;
        2: 2387:    expected_wirelength = 0.0;
        -: 2388:
        -: 2389:    /* Initialize occupancies to zero if regions are being used. */
        -: 2390:
        2: 2391:    if(place_cost_type == NONLINEAR_CONG)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 2392:	{
    #####: 2393:	    for(i = 0; i < num_regions; i++)
branch  0 never executed
branch  1 never executed
        -: 2394:		{
    #####: 2395:		    for(j = 0; j < num_regions; j++)
branch  0 never executed
branch  1 never executed
        -: 2396:			{
    #####: 2397:			    place_region_x[i][j].occupancy = 0.;
    #####: 2398:			    place_region_y[i][j].occupancy = 0.;
        -: 2399:			}
        -: 2400:		}
        -: 2401:	}
        -: 2402:
     1024: 2403:    for(k = 0; k < num_nets; k++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -: 2404:	{			/* for each net ... */
        -: 2405:
     1022: 2406:	    if(net[k].is_global == FALSE)
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
        -: 2407:		{		/* Do only if not global. */
        -: 2408:
        -: 2409:		    /* Small nets don't use incremental updating on their bounding boxes, *
        -: 2410:		     * so they can use a fast bounding box calculator.                    */
        -: 2411:
     1020: 2412:		    if(net[k].num_sinks >= SMALL_NET && method == NORMAL)
branch  0 taken 7% (fallthrough)
branch  1 taken 93%
branch  2 taken 50% (fallthrough)
branch  3 taken 50%
        -: 2413:			{
       72: 2414:			    get_bb_from_scratch(k, &bb_coords[k],
call    0 returned 100%
       36: 2415:						&bb_num_on_edges[k]);
        -: 2416:			}
        -: 2417:		    else
        -: 2418:			{
      984: 2419:			    get_non_updateable_bb(k, &bb_coords[k]);
call    0 returned 100%
        -: 2420:			}
        -: 2421:
     1020: 2422:		    if(place_cost_type != NONLINEAR_CONG)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 2423:			{
     1020: 2424:			    net_cost[k] = get_net_cost(k, &bb_coords[k]);
call    0 returned 100%
     1020: 2425:			    cost += net_cost[k];
     1020: 2426:			    if(method == CHECK)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
      510: 2427:				expected_wirelength +=
     1020: 2428:				    get_net_wirelength_estimate(k,
call    0 returned 100%
        -: 2429:								&bb_coords
      510: 2430:								[k]);
        -: 2431:			}
        -: 2432:		    else
        -: 2433:			{	/* Must be nonlinear_cong case. */
    #####: 2434:			    update_region_occ(k, &bb_coords[k], 1,
call    0 never executed
        -: 2435:					      num_regions);
        -: 2436:			}
        -: 2437:		}
        -: 2438:	}
        -: 2439:
        2: 2440:    if(place_cost_type == NONLINEAR_CONG)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 2441:	{
    #####: 2442:	    cost = nonlinear_cong_cost(num_regions);
call    0 never executed
        -: 2443:	}
        -: 2444:
        2: 2445:    if(method == CHECK)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        1: 2446:	printf("BB estimate of min-dist (placement) wirelength is ;%.0f\n",
call    0 returned 100%
        -: 2447:	       expected_wirelength);
        -: 2448:
        2: 2449:    return (cost);
        -: 2450:}
        -: 2451:
        -: 2452:
        -: 2453:static float
function nonlinear_cong_cost called 0 returned 0% blocks executed 0%
    #####: 2454:nonlinear_cong_cost(int num_regions)
        -: 2455:{
        -: 2456:
        -: 2457:    /* This routine computes the cost of a placement when the NONLINEAR_CONG *
        -: 2458:     * option is selected.  It assumes that the occupancies of all the       *
        -: 2459:     * placement subregions have been properly updated, and simply           *
        -: 2460:     * computes the cost due to these occupancies by summing over all        *
        -: 2461:     * subregions.  This will be inefficient for moves that don't affect     *
        -: 2462:     * many subregions (i.e. small moves late in placement), esp. when there *
        -: 2463:     * are a lot of subregions.  May recode later to update only affected    *
        -: 2464:     * subregions.                                                           */
        -: 2465:
        -: 2466:    float cost, tmp;
        -: 2467:    int i, j;
        -: 2468:
    #####: 2469:    cost = 0.;
        -: 2470:
    #####: 2471:    for(i = 0; i < num_regions; i++)
branch  0 never executed
branch  1 never executed
        -: 2472:	{
    #####: 2473:	    for(j = 0; j < num_regions; j++)
branch  0 never executed
branch  1 never executed
        -: 2474:		{
        -: 2475:
        -: 2476:		    /* Many different cost metrics possible.  1st try:  */
        -: 2477:
    #####: 2478:		    if(place_region_x[i][j].occupancy <
branch  0 never executed
branch  1 never executed
    #####: 2479:		       place_region_x[i][j].capacity)
        -: 2480:			{
    #####: 2481:			    cost += place_region_x[i][j].occupancy *
    #####: 2482:				place_region_x[i][j].inv_capacity;
        -: 2483:			}
        -: 2484:		    else
        -: 2485:			{	/* Overused region -- penalize. */
        -: 2486:
    #####: 2487:			    tmp = place_region_x[i][j].occupancy *
    #####: 2488:				place_region_x[i][j].inv_capacity;
    #####: 2489:			    cost += tmp * tmp;
        -: 2490:			}
        -: 2491:
    #####: 2492:		    if(place_region_y[i][j].occupancy <
branch  0 never executed
branch  1 never executed
    #####: 2493:		       place_region_y[i][j].capacity)
        -: 2494:			{
    #####: 2495:			    cost += place_region_y[i][j].occupancy *
    #####: 2496:				place_region_y[i][j].inv_capacity;
        -: 2497:			}
        -: 2498:		    else
        -: 2499:			{	/* Overused region -- penalize. */
        -: 2500:
    #####: 2501:			    tmp = place_region_y[i][j].occupancy *
    #####: 2502:				place_region_y[i][j].inv_capacity;
    #####: 2503:			    cost += tmp * tmp;
        -: 2504:			}
        -: 2505:
        -: 2506:		}
        -: 2507:	}
        -: 2508:
    #####: 2509:    return (cost);
        -: 2510:}
        -: 2511:
        -: 2512:
        -: 2513:static void
function update_region_occ called 0 returned 0% blocks executed 0%
    #####: 2514:update_region_occ(int inet,
        -: 2515:		  struct s_bb *coords,
        -: 2516:		  int add_or_sub,
        -: 2517:		  int num_regions)
        -: 2518:{
        -: 2519:
        -: 2520:    /* Called only when the place_cost_type is NONLINEAR_CONG.  If add_or_sub *
        -: 2521:     * is 1, this uses the new net bounding box to increase the occupancy     *
        -: 2522:     * of some regions.  If add_or_sub = - 1, it decreases the occupancy      *
        -: 2523:     * by that due to this bounding box.                                      */
        -: 2524:
        -: 2525:    float net_xmin, net_xmax, net_ymin, net_ymax, crossing;
        -: 2526:    float inv_region_len, inv_region_height;
        -: 2527:    float inv_bb_len, inv_bb_height;
        -: 2528:    float overlap_xlow, overlap_xhigh, overlap_ylow, overlap_yhigh;
        -: 2529:    float y_overlap, x_overlap, x_occupancy, y_occupancy;
        -: 2530:    int imin, imax, jmin, jmax, i, j;
        -: 2531:
    #####: 2532:    if(net[inet].num_sinks >= 50)
branch  0 never executed
branch  1 never executed
        -: 2533:	{
    #####: 2534:	    crossing = 2.7933 + 0.02616 * ((net[inet].num_sinks + 1) - 50);
        -: 2535:	}
        -: 2536:    else
        -: 2537:	{
    #####: 2538:	    crossing = cross_count[net[inet].num_sinks];
        -: 2539:	}
        -: 2540:
    #####: 2541:    net_xmin = coords->xmin - 0.5;
    #####: 2542:    net_xmax = coords->xmax + 0.5;
    #####: 2543:    net_ymin = coords->ymin - 0.5;
    #####: 2544:    net_ymax = coords->ymax + 0.5;
        -: 2545:
        -: 2546:    /* I could precompute the two values below.  Should consider this. */
        -: 2547:
    #####: 2548:    inv_region_len = (float)num_regions / (float)nx;
    #####: 2549:    inv_region_height = (float)num_regions / (float)ny;
        -: 2550:
        -: 2551:    /* Get integer coordinates defining the rectangular area in which the *
        -: 2552:     * subregions have to be updated.  Formula is as follows:  subtract   *
        -: 2553:     * 0.5 from net_xmin, etc. to get numbers from 0 to nx or ny;         *
        -: 2554:     * divide by nx or ny to scale between 0 and 1; multiply by           *
        -: 2555:     * num_regions to scale between 0 and num_regions; and truncate to    *
        -: 2556:     * get the final answer.                                              */
        -: 2557:
    #####: 2558:    imin = (int)(net_xmin - 0.5) * inv_region_len;
    #####: 2559:    imax = (int)(net_xmax - 0.5) * inv_region_len;
    #####: 2560:    imax = min(imax, num_regions - 1);	/* Watch for weird roundoff */
        -: 2561:
    #####: 2562:    jmin = (int)(net_ymin - 0.5) * inv_region_height;
    #####: 2563:    jmax = (int)(net_ymax - 0.5) * inv_region_height;
    #####: 2564:    jmax = min(jmax, num_regions - 1);	/* Watch for weird roundoff */
        -: 2565:
    #####: 2566:    inv_bb_len = 1. / (net_xmax - net_xmin);
    #####: 2567:    inv_bb_height = 1. / (net_ymax - net_ymin);
        -: 2568:
        -: 2569:    /* See RISA paper (ICCAD '94, pp. 690 - 695) for a description of why *
        -: 2570:     * I use exactly this cost function.                                  */
        -: 2571:
    #####: 2572:    for(i = imin; i <= imax; i++)
branch  0 never executed
branch  1 never executed
        -: 2573:	{
    #####: 2574:	    for(j = jmin; j <= jmax; j++)
branch  0 never executed
branch  1 never executed
        -: 2575:		{
    #####: 2576:		    overlap_xlow = max(place_region_bounds_x[i], net_xmin);
branch  0 never executed
branch  1 never executed
    #####: 2577:		    overlap_xhigh =
    #####: 2578:			min(place_region_bounds_x[i + 1], net_xmax);
branch  0 never executed
branch  1 never executed
    #####: 2579:		    overlap_ylow = max(place_region_bounds_y[j], net_ymin);
branch  0 never executed
branch  1 never executed
    #####: 2580:		    overlap_yhigh =
    #####: 2581:			min(place_region_bounds_y[j + 1], net_ymax);
branch  0 never executed
branch  1 never executed
        -: 2582:
    #####: 2583:		    x_overlap = overlap_xhigh - overlap_xlow;
    #####: 2584:		    y_overlap = overlap_yhigh - overlap_ylow;
        -: 2585:
        -: 2586:#ifdef DEBUG
        -: 2587:
    #####: 2588:		    if(x_overlap < -0.001)
branch  0 never executed
branch  1 never executed
        -: 2589:			{
    #####: 2590:			    printf
call    0 never executed
        -: 2591:				("Error in update_region_occ:  x_overlap < 0"
        -: 2592:				 "\n inet = %d, overlap = %g\n", inet,
        -: 2593:				 x_overlap);
        -: 2594:			}
        -: 2595:
    #####: 2596:		    if(y_overlap < -0.001)
branch  0 never executed
branch  1 never executed
        -: 2597:			{
    #####: 2598:			    printf
call    0 never executed
        -: 2599:				("Error in update_region_occ:  y_overlap < 0"
        -: 2600:				 "\n inet = %d, overlap = %g\n", inet,
        -: 2601:				 y_overlap);
        -: 2602:			}
        -: 2603:#endif
        -: 2604:
        -: 2605:
    #####: 2606:		    x_occupancy =
    #####: 2607:			crossing * y_overlap * x_overlap * inv_bb_height *
        -: 2608:			inv_region_len;
    #####: 2609:		    y_occupancy =
    #####: 2610:			crossing * x_overlap * y_overlap * inv_bb_len *
        -: 2611:			inv_region_height;
        -: 2612:
    #####: 2613:		    place_region_x[i][j].occupancy +=
    #####: 2614:			add_or_sub * x_occupancy;
    #####: 2615:		    place_region_y[i][j].occupancy +=
    #####: 2616:			add_or_sub * y_occupancy;
        -: 2617:		}
        -: 2618:	}
        -: 2619:
    #####: 2620:}
        -: 2621:
        -: 2622:
        -: 2623:static void
function free_place_regions called 0 returned 0% blocks executed 0%
    #####: 2624:free_place_regions(int num_regions)
        -: 2625:{
        -: 2626:
        -: 2627:    /* Frees the place_regions data structures needed by the NONLINEAR_CONG *
        -: 2628:     * cost function.                                                       */
        -: 2629:
    #####: 2630:    free_matrix(place_region_x, 0, num_regions - 1, 0, sizeof(struct
call    0 never executed
        -: 2631:							      s_place_region));
        -: 2632:
    #####: 2633:    free_matrix(place_region_y, 0, num_regions - 1, 0, sizeof(struct
call    0 never executed
        -: 2634:							      s_place_region));
        -: 2635:
    #####: 2636:    free(place_region_bounds_x);
    #####: 2637:    free(place_region_bounds_y);
    #####: 2638:}
        -: 2639:
        -: 2640:
        -: 2641:static void
function free_placement_structs called 1 returned 100% blocks executed 73%
        1: 2642:free_placement_structs(int place_cost_type,
        -: 2643:		       int num_regions,
        -: 2644:		       float **old_region_occ_x,
        -: 2645:		       float **old_region_occ_y,
        -: 2646:		       struct s_placer_opts placer_opts)
        -: 2647:{
        -: 2648:
        -: 2649:    /* Frees the major structures needed by the placer (and not needed       *
        -: 2650:     * elsewhere).   */
        -: 2651:
        -: 2652:    int inet;
        -: 2653:
        2: 2654:    if(placer_opts.place_algorithm == NET_TIMING_DRIVEN_PLACE ||
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        1: 2655:       placer_opts.place_algorithm == PATH_TIMING_DRIVEN_PLACE ||
branch  0 never executed
branch  1 never executed
    #####: 2656:       placer_opts.enable_timing_computations)
        -: 2657:	{
      512: 2658:	    for(inet = 0; inet < num_nets; inet++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -: 2659:		{
        -: 2660:		    /*add one to the address since it is indexed from 1 not 0 */
        -: 2661:
      511: 2662:		    point_to_point_delay_cost[inet]++;
      511: 2663:		    free(point_to_point_delay_cost[inet]);
        -: 2664:
      511: 2665:		    point_to_point_timing_cost[inet]++;
      511: 2666:		    free(point_to_point_timing_cost[inet]);
        -: 2667:
      511: 2668:		    temp_point_to_point_delay_cost[inet]++;
      511: 2669:		    free(temp_point_to_point_delay_cost[inet]);
        -: 2670:
      511: 2671:		    temp_point_to_point_timing_cost[inet]++;
      511: 2672:		    free(temp_point_to_point_timing_cost[inet]);
        -: 2673:		}
        1: 2674:	    free(point_to_point_delay_cost);
        1: 2675:	    free(temp_point_to_point_delay_cost);
        -: 2676:
        1: 2677:	    free(point_to_point_timing_cost);
        1: 2678:	    free(temp_point_to_point_timing_cost);
        -: 2679:
        1: 2680:	    free_matrix(net_pin_index, 0, num_blocks - 1, 0, sizeof(int));
call    0 returned 100%
        -: 2681:	}
        -: 2682:
        -: 2683:
        1: 2684:    free(net_cost);
        1: 2685:    free(temp_net_cost);
        1: 2686:    free(bb_num_on_edges);
        1: 2687:    free(bb_coords);
        -: 2688:
        1: 2689:    net_cost = NULL;		/* Defensive coding. */
        1: 2690:    temp_net_cost = NULL;
        1: 2691:    bb_num_on_edges = NULL;
        1: 2692:    bb_coords = NULL;
        -: 2693:
        1: 2694:    free_unique_pin_list();
call    0 returned 100%
        -: 2695:
        1: 2696:    if(place_cost_type == NONLINEAR_CONG)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 2697:	{
    #####: 2698:	    free_place_regions(num_regions);
call    0 never executed
    #####: 2699:	    free_matrix(old_region_occ_x, 0, num_regions - 1, 0,
call    0 never executed
        -: 2700:			sizeof(float));
    #####: 2701:	    free_matrix(old_region_occ_y, 0, num_regions - 1, 0,
call    0 never executed
        -: 2702:			sizeof(float));
        -: 2703:	}
        -: 2704:
        1: 2705:    else if(place_cost_type == LINEAR_CONG)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 2706:	{
        1: 2707:	    free_fast_cost_update_structs();
call    0 returned 100%
        -: 2708:	}
        1: 2709:}
        -: 2710:
        -: 2711:
        -: 2712:static void
function alloc_and_load_placement_structs called 1 returned 100% blocks executed 86%
        1: 2713:alloc_and_load_placement_structs(int place_cost_type,
        -: 2714:				 int num_regions,
        -: 2715:				 float place_cost_exp,
        -: 2716:				 float ***old_region_occ_x,
        -: 2717:				 float ***old_region_occ_y,
        -: 2718:				 struct s_placer_opts placer_opts)
        -: 2719:{
        -: 2720:
        -: 2721:    /* Allocates the major structures needed only by the placer, primarily for *
        -: 2722:     * computing costs quickly and such.                                       */
        -: 2723:
        -: 2724:    int inet, ipin, max_pins_per_fb, i;
        -: 2725:
        1: 2726:    max_pins_per_fb = 0;
        5: 2727:    for(i = 0; i < num_types; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -: 2728:	{
        4: 2729:	    max_pins_per_fb =
        4: 2730:		max(max_pins_per_fb, type_descriptors[i].num_pins);
        -: 2731:	}
        -: 2732:
        2: 2733:    if(placer_opts.place_algorithm == NET_TIMING_DRIVEN_PLACE ||
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        1: 2734:       placer_opts.place_algorithm == PATH_TIMING_DRIVEN_PLACE ||
branch  0 never executed
branch  1 never executed
    #####: 2735:       placer_opts.enable_timing_computations)
        -: 2736:	{
        -: 2737:	    /*allocate structures associated with timing driven placement */
        -: 2738:	    /* [0..num_nets-1][1..num_pins-1]  */
        1: 2739:	    point_to_point_delay_cost =
        1: 2740:		(float **)my_malloc(num_nets * sizeof(float *));
call    0 returned 100%
        1: 2741:	    temp_point_to_point_delay_cost =
        1: 2742:		(float **)my_malloc(num_nets * sizeof(float *));
call    0 returned 100%
        -: 2743:
        1: 2744:	    point_to_point_timing_cost =
        1: 2745:		(float **)my_malloc(num_nets * sizeof(float *));
call    0 returned 100%
        1: 2746:	    temp_point_to_point_timing_cost =
        1: 2747:		(float **)my_malloc(num_nets * sizeof(float *));
call    0 returned 100%
        -: 2748:
        1: 2749:	    net_pin_index =
        1: 2750:		(int **)alloc_matrix(0, num_blocks - 1, 0,
call    0 returned 100%
        -: 2751:				     max_pins_per_fb - 1, sizeof(int));
        -: 2752:
      512: 2753:	    for(inet = 0; inet < num_nets; inet++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -: 2754:		{
        -: 2755:
        -: 2756:		    /* in the following, subract one so index starts at *
        -: 2757:		     * 1 instead of 0 */
     1022: 2758:		    point_to_point_delay_cost[inet] =
      511: 2759:			(float *)my_malloc(net[inet].num_sinks *
call    0 returned 100%
        -: 2760:					   sizeof(float));
      511: 2761:		    point_to_point_delay_cost[inet]--;
        -: 2762:
     1022: 2763:		    temp_point_to_point_delay_cost[inet] =
      511: 2764:			(float *)my_malloc(net[inet].num_sinks *
call    0 returned 100%
        -: 2765:					   sizeof(float));
      511: 2766:		    temp_point_to_point_delay_cost[inet]--;
        -: 2767:
     1022: 2768:		    point_to_point_timing_cost[inet] =
      511: 2769:			(float *)my_malloc(net[inet].num_sinks *
call    0 returned 100%
        -: 2770:					   sizeof(float));
      511: 2771:		    point_to_point_timing_cost[inet]--;
        -: 2772:
     1022: 2773:		    temp_point_to_point_timing_cost[inet] =
      511: 2774:			(float *)my_malloc(net[inet].num_sinks *
call    0 returned 100%
        -: 2775:					   sizeof(float));
      511: 2776:		    temp_point_to_point_timing_cost[inet]--;
        -: 2777:		}
      512: 2778:	    for(inet = 0; inet < num_nets; inet++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -: 2779:		{
     1724: 2780:		    for(ipin = 1; ipin <= net[inet].num_sinks; ipin++)
branch  0 taken 70%
branch  1 taken 30% (fallthrough)
        -: 2781:			{
     1213: 2782:			    point_to_point_delay_cost[inet][ipin] = 0;
     1213: 2783:			    temp_point_to_point_delay_cost[inet][ipin] = 0;
        -: 2784:			}
        -: 2785:		}
        -: 2786:	}
        -: 2787:
        -: 2788:
        -: 2789:
        -: 2790:
        -: 2791:
        1: 2792:    net_cost = (float *)my_malloc(num_nets * sizeof(float));
call    0 returned 100%
        1: 2793:    temp_net_cost = (float *)my_malloc(num_nets * sizeof(float));
call    0 returned 100%
        -: 2794:
        -: 2795:    /* Used to store costs for moves not yet made and to indicate when a net's   *
        -: 2796:     * cost has been recomputed. temp_net_cost[inet] < 0 means net's cost hasn't *
        -: 2797:     * been recomputed.                                                          */
        -: 2798:
      512: 2799:    for(inet = 0; inet < num_nets; inet++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
      511: 2800:	temp_net_cost[inet] = -1.;
        -: 2801:
        1: 2802:    bb_coords = (struct s_bb *)my_malloc(num_nets * sizeof(struct s_bb));
call    0 returned 100%
        1: 2803:    bb_num_on_edges =
        1: 2804:	(struct s_bb *)my_malloc(num_nets * sizeof(struct s_bb));
call    0 returned 100%
        -: 2805:
        -: 2806:    /* Get a list of pins with no duplicates. */
        -: 2807:
        1: 2808:    alloc_and_load_unique_pin_list();
call    0 returned 100%
        -: 2809:
        -: 2810:    /* Allocate storage for subregion data, if needed. */
        -: 2811:
        1: 2812:    if(place_cost_type == NONLINEAR_CONG)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 2813:	{
    #####: 2814:	    alloc_place_regions(num_regions);
call    0 never executed
    #####: 2815:	    load_place_regions(num_regions);
call    0 never executed
    #####: 2816:	    *old_region_occ_x = (float **)alloc_matrix(0, num_regions - 1, 0,
call    0 never executed
        -: 2817:						       num_regions - 1,
        -: 2818:						       sizeof(float));
    #####: 2819:	    *old_region_occ_y =
    #####: 2820:		(float **)alloc_matrix(0, num_regions - 1, 0, num_regions - 1,
call    0 never executed
        -: 2821:				       sizeof(float));
        -: 2822:	}
        -: 2823:    else
        -: 2824:	{			/* Shouldn't use them; crash hard if I do!   */
        1: 2825:	    *old_region_occ_x = NULL;
        1: 2826:	    *old_region_occ_y = NULL;
        -: 2827:	}
        -: 2828:
        1: 2829:    if(place_cost_type == LINEAR_CONG)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 2830:	{
        1: 2831:	    alloc_and_load_for_fast_cost_update(place_cost_exp);
call    0 returned 100%
        -: 2832:	}
        1: 2833:}
        -: 2834:
        -: 2835:
        -: 2836:static void
function alloc_place_regions called 0 returned 0% blocks executed 0%
    #####: 2837:alloc_place_regions(int num_regions)
        -: 2838:{
        -: 2839:
        -: 2840:    /* Allocates memory for the regional occupancy, cost, etc. counts *
        -: 2841:     * kept when we're using the NONLINEAR_CONG placement cost        *
        -: 2842:     * function.                                                      */
        -: 2843:
    #####: 2844:    place_region_x =
    #####: 2845:	(struct s_place_region **)alloc_matrix(0, num_regions - 1, 0,
call    0 never executed
        -: 2846:					       num_regions - 1,
        -: 2847:					       sizeof(struct s_place_region));
        -: 2848:
    #####: 2849:    place_region_y =
    #####: 2850:	(struct s_place_region **)alloc_matrix(0, num_regions - 1, 0,
call    0 never executed
        -: 2851:					       num_regions - 1,
        -: 2852:					       sizeof(struct s_place_region));
        -: 2853:
    #####: 2854:    place_region_bounds_x = (float *)my_malloc((num_regions + 1) *
call    0 never executed
        -: 2855:					       sizeof(float));
        -: 2856:
    #####: 2857:    place_region_bounds_y = (float *)my_malloc((num_regions + 1) *
call    0 never executed
        -: 2858:					       sizeof(float));
    #####: 2859:}
        -: 2860:
        -: 2861:
        -: 2862:static void
function load_place_regions called 0 returned 0% blocks executed 0%
    #####: 2863:load_place_regions(int num_regions)
        -: 2864:{
        -: 2865:
        -: 2866:    /* Loads the capacity values in each direction for each of the placement *
        -: 2867:     * regions.  The chip is divided into a num_regions x num_regions array. */
        -: 2868:
        -: 2869:    int i, j, low_block, high_block, rnum;
        -: 2870:    float low_lim, high_lim, capacity, fac, block_capacity;
        -: 2871:    float len_fac, height_fac;
        -: 2872:
        -: 2873:    /* First load up horizontal channel capacities.  */
        -: 2874:
    #####: 2875:    for(j = 0; j < num_regions; j++)
branch  0 never executed
branch  1 never executed
        -: 2876:	{
    #####: 2877:	    capacity = 0.;
    #####: 2878:	    low_lim = (float)j / (float)num_regions *ny + 1.;
    #####: 2879:	    high_lim = (float)(j + 1) / (float)num_regions *ny;
        -: 2880:
    #####: 2881:	    low_block = floor(low_lim);
    #####: 2882:	    low_block = max(1, low_block);	/* Watch for weird roundoff effects. */
    #####: 2883:	    high_block = ceil(high_lim);
    #####: 2884:	    high_block = min(high_block, ny);
        -: 2885:
    #####: 2886:	    block_capacity = (chan_width_x[low_block - 1] +
    #####: 2887:			      chan_width_x[low_block]) / 2.;
    #####: 2888:	    if(low_block == 1)
branch  0 never executed
branch  1 never executed
    #####: 2889:		block_capacity += chan_width_x[0] / 2.;
        -: 2890:
    #####: 2891:	    fac = 1. - (low_lim - low_block);
    #####: 2892:	    capacity += fac * block_capacity;
        -: 2893:
    #####: 2894:	    for(rnum = low_block + 1; rnum < high_block; rnum++)
branch  0 never executed
branch  1 never executed
        -: 2895:		{
    #####: 2896:		    block_capacity =
    #####: 2897:			(chan_width_x[rnum - 1] + chan_width_x[rnum]) / 2.;
    #####: 2898:		    capacity += block_capacity;
        -: 2899:		}
        -: 2900:
    #####: 2901:	    block_capacity = (chan_width_x[high_block - 1] +
    #####: 2902:			      chan_width_x[high_block]) / 2.;
    #####: 2903:	    if(high_block == ny)
branch  0 never executed
branch  1 never executed
    #####: 2904:		block_capacity += chan_width_x[ny] / 2.;
        -: 2905:
    #####: 2906:	    fac = 1. - (high_block - high_lim);
    #####: 2907:	    capacity += fac * block_capacity;
        -: 2908:
    #####: 2909:	    for(i = 0; i < num_regions; i++)
branch  0 never executed
branch  1 never executed
        -: 2910:		{
    #####: 2911:		    place_region_x[i][j].capacity = capacity;
    #####: 2912:		    place_region_x[i][j].inv_capacity = 1. / capacity;
    #####: 2913:		    place_region_x[i][j].occupancy = 0.;
    #####: 2914:		    place_region_x[i][j].cost = 0.;
        -: 2915:		}
        -: 2916:	}
        -: 2917:
        -: 2918:    /* Now load vertical channel capacities.  */
        -: 2919:
    #####: 2920:    for(i = 0; i < num_regions; i++)
branch  0 never executed
branch  1 never executed
        -: 2921:	{
    #####: 2922:	    capacity = 0.;
    #####: 2923:	    low_lim = (float)i / (float)num_regions *nx + 1.;
    #####: 2924:	    high_lim = (float)(i + 1) / (float)num_regions *nx;
        -: 2925:
    #####: 2926:	    low_block = floor(low_lim);
    #####: 2927:	    low_block = max(1, low_block);	/* Watch for weird roundoff effects. */
    #####: 2928:	    high_block = ceil(high_lim);
    #####: 2929:	    high_block = min(high_block, nx);
        -: 2930:
    #####: 2931:	    block_capacity = (chan_width_y[low_block - 1] +
    #####: 2932:			      chan_width_y[low_block]) / 2.;
    #####: 2933:	    if(low_block == 1)
branch  0 never executed
branch  1 never executed
    #####: 2934:		block_capacity += chan_width_y[0] / 2.;
        -: 2935:
    #####: 2936:	    fac = 1. - (low_lim - low_block);
    #####: 2937:	    capacity += fac * block_capacity;
        -: 2938:
    #####: 2939:	    for(rnum = low_block + 1; rnum < high_block; rnum++)
branch  0 never executed
branch  1 never executed
        -: 2940:		{
    #####: 2941:		    block_capacity =
    #####: 2942:			(chan_width_y[rnum - 1] + chan_width_y[rnum]) / 2.;
    #####: 2943:		    capacity += block_capacity;
        -: 2944:		}
        -: 2945:
    #####: 2946:	    block_capacity = (chan_width_y[high_block - 1] +
    #####: 2947:			      chan_width_y[high_block]) / 2.;
    #####: 2948:	    if(high_block == nx)
branch  0 never executed
branch  1 never executed
    #####: 2949:		block_capacity += chan_width_y[nx] / 2.;
        -: 2950:
    #####: 2951:	    fac = 1. - (high_block - high_lim);
    #####: 2952:	    capacity += fac * block_capacity;
        -: 2953:
    #####: 2954:	    for(j = 0; j < num_regions; j++)
branch  0 never executed
branch  1 never executed
        -: 2955:		{
    #####: 2956:		    place_region_y[i][j].capacity = capacity;
    #####: 2957:		    place_region_y[i][j].inv_capacity = 1. / capacity;
    #####: 2958:		    place_region_y[i][j].occupancy = 0.;
    #####: 2959:		    place_region_y[i][j].cost = 0.;
        -: 2960:		}
        -: 2961:	}
        -: 2962:
        -: 2963:    /* Finally set up the arrays indicating the limits of each of the *
        -: 2964:     * placement subregions.                                          */
        -: 2965:
    #####: 2966:    len_fac = (float)nx / (float)num_regions;
    #####: 2967:    height_fac = (float)ny / (float)num_regions;
        -: 2968:
    #####: 2969:    place_region_bounds_x[0] = 0.5;
    #####: 2970:    place_region_bounds_y[0] = 0.5;
        -: 2971:
    #####: 2972:    for(i = 1; i <= num_regions; i++)
branch  0 never executed
branch  1 never executed
        -: 2973:	{
    #####: 2974:	    place_region_bounds_x[i] = place_region_bounds_x[i - 1] + len_fac;
    #####: 2975:	    place_region_bounds_y[i] =
    #####: 2976:		place_region_bounds_y[i - 1] + height_fac;
        -: 2977:	}
    #####: 2978:}
        -: 2979:
        -: 2980:
        -: 2981:static void
function free_unique_pin_list called 1 returned 100% blocks executed 100%
        1: 2982:free_unique_pin_list(void)
        -: 2983:{
        -: 2984:
        -: 2985:    /* Frees the unique pin list structures.                               */
        -: 2986:
        -: 2987:    int any_dup, inet;
        -: 2988:
        1: 2989:    any_dup = 0;
        -: 2990:
      512: 2991:    for(inet = 0; inet < num_nets; inet++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -: 2992:	{
      511: 2993:	    if(duplicate_pins[inet] != 0)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -: 2994:		{
        1: 2995:		    free(unique_pin_list[inet]);
        1: 2996:		    any_dup = 1;
        -: 2997:		}
        -: 2998:	}
        -: 2999:
        1: 3000:    if(any_dup != 0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 3001:	free(unique_pin_list);
        -: 3002:
        1: 3003:    free(duplicate_pins);
        1: 3004:}
        -: 3005:
        -: 3006:
        -: 3007:static void
function alloc_and_load_unique_pin_list called 1 returned 100% blocks executed 100%
        1: 3008:alloc_and_load_unique_pin_list(void)
        -: 3009:{
        -: 3010:
        -: 3011:    /* This routine looks for multiple pins going to the same block in the *
        -: 3012:     * pinlist of each net.  If it finds any, it marks that net as having  *
        -: 3013:     * duplicate pins, and creates a new pinlist with no duplicates.  This *
        -: 3014:     * is then used by the updatable bounding box calculation routine for  *
        -: 3015:     * efficiency.                                                         */
        -: 3016:
        -: 3017:    int inet, ipin, bnum, num_dup, any_dups, offset;
        -: 3018:    int *times_listed;		/* [0..num_blocks-1]: number of times a block is   *
        -: 3019:				 * * listed in the pinlist of a net.  Temp. storage. */
        -: 3020:
        1: 3021:    duplicate_pins = my_calloc(num_nets, sizeof(int));
call    0 returned 100%
        1: 3022:    times_listed = my_calloc(num_blocks, sizeof(int));
call    0 returned 100%
        1: 3023:    any_dups = 0;
        -: 3024:
      512: 3025:    for(inet = 0; inet < num_nets; inet++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -: 3026:	{
        -: 3027:
      511: 3028:	    num_dup = 0;
        -: 3029:
     2235: 3030:	    for(ipin = 0; ipin <= net[inet].num_sinks; ipin++)
branch  0 taken 77%
branch  1 taken 23% (fallthrough)
        -: 3031:		{
     1724: 3032:		    bnum = net[inet].node_block[ipin];
     1724: 3033:		    times_listed[bnum]++;
     1724: 3034:		    if(times_listed[bnum] > 1)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
       97: 3035:			num_dup++;
        -: 3036:		}
        -: 3037:
      511: 3038:	    if(num_dup > 0)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -: 3039:		{		/* Duplicates found.  Make unique pin list. */
        1: 3040:		    duplicate_pins[inet] = num_dup;
        -: 3041:
        1: 3042:		    if(any_dups == 0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 3043:			{	/* This is the first duplicate found */
        1: 3044:			    unique_pin_list =
        1: 3045:				(int **)my_calloc(num_nets, sizeof(int *));
call    0 returned 100%
        1: 3046:			    any_dups = 1;
        -: 3047:			}
        -: 3048:
        2: 3049:		    unique_pin_list[inet] =
        1: 3050:			my_malloc((net[inet].num_sinks + 1 -
call    0 returned 100%
        -: 3051:				   num_dup) * sizeof(int));
        -: 3052:
        1: 3053:		    offset = 0;
      104: 3054:		    for(ipin = 0; ipin <= net[inet].num_sinks; ipin++)
branch  0 taken 99%
branch  1 taken 1%
        -: 3055:			{
      103: 3056:			    bnum = net[inet].node_block[ipin];
      103: 3057:			    if(times_listed[bnum] != 0)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -: 3058:				{
        6: 3059:				    times_listed[bnum] = 0;
        6: 3060:				    unique_pin_list[inet][offset] = bnum;
        6: 3061:				    offset++;
        -: 3062:				}
        -: 3063:			}
        -: 3064:		}
        -: 3065:
        -: 3066:	    else
        -: 3067:		{		/* No duplicates found.  Reset times_listed. */
     2131: 3068:		    for(ipin = 0; ipin <= net[inet].num_sinks; ipin++)
branch  0 taken 76%
branch  1 taken 24% (fallthrough)
        -: 3069:			{
     1621: 3070:			    bnum = net[inet].node_block[ipin];
     1621: 3071:			    times_listed[bnum] = 0;
        -: 3072:			}
        -: 3073:		}
        -: 3074:	}
        -: 3075:
        1: 3076:    free((void *)times_listed);
        1: 3077:}
        -: 3078:
        -: 3079:
        -: 3080:static void
function get_bb_from_scratch called 315200 returned 100% blocks executed 100%
   315200: 3081:get_bb_from_scratch(int inet,
        -: 3082:		    struct s_bb *coords,
        -: 3083:		    struct s_bb *num_on_edges)
        -: 3084:{
        -: 3085:
        -: 3086:    /* This routine finds the bounding box of each net from scratch (i.e.    *
        -: 3087:     * from only the block location information).  It updates both the       *
        -: 3088:     * coordinate and number of blocks on each edge information.  It         *
        -: 3089:     * should only be called when the bounding box information is not valid. */
        -: 3090:
        -: 3091:    int ipin, bnum, x, y, xmin, xmax, ymin, ymax;
        -: 3092:    int xmin_edge, xmax_edge, ymin_edge, ymax_edge;
        -: 3093:    int n_pins;
        -: 3094:    int *plist;
        -: 3095:
        -: 3096:    /* I need a list of blocks to which this net connects, with no block listed *
        -: 3097:     * more than once, in order to get a proper count of the number on the edge *
        -: 3098:     * of the bounding box.                                                     */
        -: 3099:
   315200: 3100:    if(duplicate_pins[inet] == 0)
branch  0 taken 97% (fallthrough)
branch  1 taken 3%
        -: 3101:	{
   305925: 3102:	    plist = net[inet].node_block;
   305925: 3103:	    n_pins = net[inet].num_sinks + 1;
        -: 3104:	}
        -: 3105:    else
        -: 3106:	{
     9275: 3107:	    plist = unique_pin_list[inet];
     9275: 3108:	    n_pins = (net[inet].num_sinks + 1) - duplicate_pins[inet];
        -: 3109:	}
        -: 3110:
   315200: 3111:    x = block[plist[0]].x;
   315200: 3112:    y = block[plist[0]].y;
        -: 3113:
   315200: 3114:    x = max(min(x, nx), 1);
   315200: 3115:    y = max(min(y, ny), 1);
        -: 3116:
   315200: 3117:    xmin = x;
   315200: 3118:    ymin = y;
   315200: 3119:    xmax = x;
   315200: 3120:    ymax = y;
   315200: 3121:    xmin_edge = 1;
   315200: 3122:    ymin_edge = 1;
   315200: 3123:    xmax_edge = 1;
   315200: 3124:    ymax_edge = 1;
        -: 3125:
  2400959: 3126:    for(ipin = 1; ipin < n_pins; ipin++)
branch  0 taken 87%
branch  1 taken 13% (fallthrough)
        -: 3127:	{
        -: 3128:
  2085759: 3129:	    bnum = plist[ipin];
  2085759: 3130:	    x = block[bnum].x;
  2085759: 3131:	    y = block[bnum].y;
        -: 3132:
        -: 3133:	    /* Code below counts IO blocks as being within the 1..nx, 1..ny clb array. *
        -: 3134:	     * This is because channels do not go out of the 0..nx, 0..ny range, and   *
        -: 3135:	     * I always take all channels impinging on the bounding box to be within   *
        -: 3136:	     * that bounding box.  Hence, this "movement" of IO blocks does not affect *
        -: 3137:	     * the which channels are included within the bounding box, and it         *
        -: 3138:	     * simplifies the code a lot.                                              */
        -: 3139:
  2085759: 3140:	    x = max(min(x, nx), 1);
  2085759: 3141:	    y = max(min(y, ny), 1);
        -: 3142:
  2085759: 3143:	    if(x == xmin)
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
        -: 3144:		{
   409153: 3145:		    xmin_edge++;
        -: 3146:		}
  2085759: 3147:	    if(x == xmax)
branch  0 taken 16% (fallthrough)
branch  1 taken 84%
        -: 3148:		{		/* Recall that xmin could equal xmax -- don't use else */
   332548: 3149:		    xmax_edge++;
        -: 3150:		}
  1753211: 3151:	    else if(x < xmin)
branch  0 taken 18% (fallthrough)
branch  1 taken 82%
        -: 3152:		{
   324059: 3153:		    xmin = x;
   324059: 3154:		    xmin_edge = 1;
        -: 3155:		}
  1429152: 3156:	    else if(x > xmax)
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        -: 3157:		{
   357416: 3158:		    xmax = x;
   357416: 3159:		    xmax_edge = 1;
        -: 3160:		}
        -: 3161:
  2085759: 3162:	    if(y == ymin)
branch  0 taken 12% (fallthrough)
branch  1 taken 88%
        -: 3163:		{
   242342: 3164:		    ymin_edge++;
        -: 3165:		}
  2085759: 3166:	    if(y == ymax)
branch  0 taken 15% (fallthrough)
branch  1 taken 85%
        -: 3167:		{
   303590: 3168:		    ymax_edge++;
        -: 3169:		}
  1782169: 3170:	    else if(y < ymin)
branch  0 taken 21% (fallthrough)
branch  1 taken 79%
        -: 3171:		{
   370647: 3172:		    ymin = y;
   370647: 3173:		    ymin_edge = 1;
        -: 3174:		}
  1411522: 3175:	    else if(y > ymax)
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        -: 3176:		{
   355607: 3177:		    ymax = y;
   355607: 3178:		    ymax_edge = 1;
        -: 3179:		}
        -: 3180:	}
        -: 3181:
        -: 3182:    /* Copy the coordinates and number on edges information into the proper   *
        -: 3183:     * structures.                                                            */
        -: 3184:
   315200: 3185:    coords->xmin = xmin;
   315200: 3186:    coords->xmax = xmax;
   315200: 3187:    coords->ymin = ymin;
   315200: 3188:    coords->ymax = ymax;
        -: 3189:
   315200: 3190:    num_on_edges->xmin = xmin_edge;
   315200: 3191:    num_on_edges->xmax = xmax_edge;
   315200: 3192:    num_on_edges->ymin = ymin_edge;
   315200: 3193:    num_on_edges->ymax = ymax_edge;
   315200: 3194:}
        -: 3195:
        -: 3196:
        -: 3197:static double
function get_net_wirelength_estimate called 510 returned 100% blocks executed 88%
      510: 3198:get_net_wirelength_estimate(int inet,
        -: 3199:			    struct s_bb *bbptr)
        -: 3200:{
        -: 3201:
        -: 3202:    /* WMF: Finds the estimate of wirelength due to one net by looking at   *
        -: 3203:     * its coordinate bounding box.                                         */
        -: 3204:
        -: 3205:    double ncost, crossing;
        -: 3206:
        -: 3207:    /* Get the expected "crossing count" of a net, based on its number *
        -: 3208:     * of pins.  Extrapolate for very large nets.                      */
        -: 3209:
      510: 3210:    if(((net[inet].num_sinks + 1) > 50) && ((net[inet].num_sinks + 1) < 85))
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -: 3211:	{
    #####: 3212:	    crossing = 2.7933 + 0.02616 * ((net[inet].num_sinks + 1) - 50);
        -: 3213:	}
      510: 3214:    else if((net[inet].num_sinks + 1) >= 85)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -: 3215:	{
        1: 3216:	    crossing =
        1: 3217:		2.7933 + 0.011 * (net[inet].num_sinks + 1) -
        1: 3218:		0.0000018 * (net[inet].num_sinks + 1) * (net[inet].num_sinks +
        -: 3219:							 1);
        -: 3220:	}
        -: 3221:    else
        -: 3222:	{
      509: 3223:	    crossing = cross_count[(net[inet].num_sinks + 1) - 1];
        -: 3224:	}
        -: 3225:
        -: 3226:    /* Could insert a check for xmin == xmax.  In that case, assume  *
        -: 3227:     * connection will be made with no bends and hence no x-cost.    *
        -: 3228:     * Same thing for y-cost.                                        */
        -: 3229:
        -: 3230:    /* Cost = wire length along channel * cross_count / average      *
        -: 3231:     * channel capacity.   Do this for x, then y direction and add.  */
        -: 3232:
      510: 3233:    ncost = (bbptr->xmax - bbptr->xmin + 1) * crossing;
        -: 3234:
      510: 3235:    ncost += (bbptr->ymax - bbptr->ymin + 1) * crossing;
        -: 3236:
      510: 3237:    return (ncost);
        -: 3238:}
        -: 3239:
        -: 3240:
        -: 3241:static float
function get_net_cost called 15637785 returned 100% blocks executed 100%
 15637785: 3242:get_net_cost(int inet,
        -: 3243:	     struct s_bb *bbptr)
        -: 3244:{
        -: 3245:
        -: 3246:    /* Finds the cost due to one net by looking at its coordinate bounding  *
        -: 3247:     * box.                                                                 */
        -: 3248:
        -: 3249:    float ncost, crossing;
        -: 3250:
        -: 3251:    /* Get the expected "crossing count" of a net, based on its number *
        -: 3252:     * of pins.  Extrapolate for very large nets.                      */
        -: 3253:
 15637785: 3254:    if((net[inet].num_sinks + 1) > 50)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -: 3255:	{
    19350: 3256:	    crossing = 2.7933 + 0.02616 * ((net[inet].num_sinks + 1) - 50);
        -: 3257:	    /*    crossing = 3.0;    Old value  */
        -: 3258:	}
        -: 3259:    else
        -: 3260:	{
 15618435: 3261:	    crossing = cross_count[(net[inet].num_sinks + 1) - 1];
        -: 3262:	}
        -: 3263:
        -: 3264:    /* Could insert a check for xmin == xmax.  In that case, assume  *
        -: 3265:     * connection will be made with no bends and hence no x-cost.    *
        -: 3266:     * Same thing for y-cost.                                        */
        -: 3267:
        -: 3268:    /* Cost = wire length along channel * cross_count / average      *
        -: 3269:     * channel capacity.   Do this for x, then y direction and add.  */
        -: 3270:
 31275570: 3271:    ncost = (bbptr->xmax - bbptr->xmin + 1) * crossing *
 15637785: 3272:	chanx_place_cost_fac[bbptr->ymax][bbptr->ymin - 1];
        -: 3273:
 31275570: 3274:    ncost += (bbptr->ymax - bbptr->ymin + 1) * crossing *
 15637785: 3275:	chany_place_cost_fac[bbptr->xmax][bbptr->xmin - 1];
        -: 3276:
 15637785: 3277:    return (ncost);
        -: 3278:}
        -: 3279:
        -: 3280:
        -: 3281:static void
function get_non_updateable_bb called 12629702 returned 100% blocks executed 100%
 12629702: 3282:get_non_updateable_bb(int inet,
        -: 3283:		      struct s_bb *bb_coord_new)
        -: 3284:{
        -: 3285:
        -: 3286:    /* Finds the bounding box of a net and stores its coordinates in the  *
        -: 3287:     * bb_coord_new data structure.  This routine should only be called   *
        -: 3288:     * for small nets, since it does not determine enough information for *
        -: 3289:     * the bounding box to be updated incrementally later.                *
        -: 3290:     * Currently assumes channels on both sides of the CLBs forming the   *
        -: 3291:     * edges of the bounding box can be used.  Essentially, I am assuming *
        -: 3292:     * the pins always lie on the outside of the bounding box.            */
        -: 3293:
        -: 3294:
        -: 3295:    int k, xmax, ymax, xmin, ymin, x, y;
        -: 3296:
 12629702: 3297:    x = block[net[inet].node_block[0]].x;
 12629702: 3298:    y = block[net[inet].node_block[0]].y;
        -: 3299:
 12629702: 3300:    xmin = x;
 12629702: 3301:    ymin = y;
 12629702: 3302:    xmax = x;
 12629702: 3303:    ymax = y;
        -: 3304:
 32221618: 3305:    for(k = 1; k < (net[inet].num_sinks + 1); k++)
branch  0 taken 61%
branch  1 taken 39% (fallthrough)
        -: 3306:	{
 19591916: 3307:	    x = block[net[inet].node_block[k]].x;
 19591916: 3308:	    y = block[net[inet].node_block[k]].y;
        -: 3309:
 19591916: 3310:	    if(x < xmin)
branch  0 taken 35% (fallthrough)
branch  1 taken 65%
        -: 3311:		{
  6864816: 3312:		    xmin = x;
        -: 3313:		}
 12727100: 3314:	    else if(x > xmax)
branch  0 taken 61% (fallthrough)
branch  1 taken 39%
        -: 3315:		{
  7745959: 3316:		    xmax = x;
        -: 3317:		}
        -: 3318:
 19591916: 3319:	    if(y < ymin)
branch  0 taken 38% (fallthrough)
branch  1 taken 62%
        -: 3320:		{
  7434628: 3321:		    ymin = y;
        -: 3322:		}
 12157288: 3323:	    else if(y > ymax)
branch  0 taken 58% (fallthrough)
branch  1 taken 42%
        -: 3324:		{
  7068622: 3325:		    ymax = y;
        -: 3326:		}
        -: 3327:	}
        -: 3328:
        -: 3329:    /* Now I've found the coordinates of the bounding box.  There are no *
        -: 3330:     * channels beyond nx and ny, so I want to clip to that.  As well,   *
        -: 3331:     * since I'll always include the channel immediately below and the   *
        -: 3332:     * channel immediately to the left of the bounding box, I want to    *
        -: 3333:     * clip to 1 in both directions as well (since minimum channel index *
        -: 3334:     * is 0).  See route.c for a channel diagram.                        */
        -: 3335:
 12629702: 3336:    bb_coord_new->xmin = max(min(xmin, nx), 1);
 12629702: 3337:    bb_coord_new->ymin = max(min(ymin, ny), 1);
 12629702: 3338:    bb_coord_new->xmax = max(min(xmax, nx), 1);
 12629702: 3339:    bb_coord_new->ymax = max(min(ymax, ny), 1);
 12629702: 3340:}
        -: 3341:
        -: 3342:
        -: 3343:static void
function update_bb called 3008047 returned 100% blocks executed 100%
  3008047: 3344:update_bb(int inet,
        -: 3345:	  struct s_bb *bb_coord_new,
        -: 3346:	  struct s_bb *bb_edge_new,
        -: 3347:	  int xold,
        -: 3348:	  int yold,
        -: 3349:	  int xnew,
        -: 3350:	  int ynew)
        -: 3351:{
        -: 3352:
        -: 3353:    /* Updates the bounding box of a net by storing its coordinates in    *
        -: 3354:     * the bb_coord_new data structure and the number of blocks on each   *
        -: 3355:     * edge in the bb_edge_new data structure.  This routine should only  *
        -: 3356:     * be called for large nets, since it has some overhead relative to   *
        -: 3357:     * just doing a brute force bounding box calculation.  The bounding   *
        -: 3358:     * box coordinate and edge information for inet must be valid before  *
        -: 3359:     * this routine is called.                                            *
        -: 3360:     * Currently assumes channels on both sides of the CLBs forming the   *
        -: 3361:     * edges of the bounding box can be used.  Essentially, I am assuming *
        -: 3362:     * the pins always lie on the outside of the bounding box.            */
        -: 3363:
        -: 3364:    /* IO blocks are considered to be one cell in for simplicity. */
        -: 3365:
  3008047: 3366:    xnew = max(min(xnew, nx), 1);
  3008047: 3367:    ynew = max(min(ynew, ny), 1);
  3008047: 3368:    xold = max(min(xold, nx), 1);
  3008047: 3369:    yold = max(min(yold, ny), 1);
        -: 3370:
        -: 3371:    /* Check if I can update the bounding box incrementally. */
        -: 3372:
  3008047: 3373:    if(xnew < xold)
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -: 3374:	{			/* Move to left. */
        -: 3375:
        -: 3376:	    /* Update the xmax fields for coordinates and number of edges first. */
        -: 3377:
   999544: 3378:	    if(xold == bb_coords[inet].xmax)
branch  0 taken 36% (fallthrough)
branch  1 taken 64%
        -: 3379:		{		/* Old position at xmax. */
   362893: 3380:		    if(bb_num_on_edges[inet].xmax == 1)
branch  0 taken 23% (fallthrough)
branch  1 taken 77%
        -: 3381:			{
    83700: 3382:			    get_bb_from_scratch(inet, bb_coord_new,
call    0 returned 100%
        -: 3383:						bb_edge_new);
    83700: 3384:			    return;
        -: 3385:			}
        -: 3386:		    else
        -: 3387:			{
   279193: 3388:			    bb_edge_new->xmax =
   279193: 3389:				bb_num_on_edges[inet].xmax - 1;
   279193: 3390:			    bb_coord_new->xmax = bb_coords[inet].xmax;
        -: 3391:			}
        -: 3392:		}
        -: 3393:
        -: 3394:	    else
        -: 3395:		{		/* Move to left, old postion was not at xmax. */
   636651: 3396:		    bb_coord_new->xmax = bb_coords[inet].xmax;
   636651: 3397:		    bb_edge_new->xmax = bb_num_on_edges[inet].xmax;
        -: 3398:		}
        -: 3399:
        -: 3400:	    /* Now do the xmin fields for coordinates and number of edges. */
        -: 3401:
   915844: 3402:	    if(xnew < bb_coords[inet].xmin)
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
        -: 3403:		{		/* Moved past xmin */
   152509: 3404:		    bb_coord_new->xmin = xnew;
   152509: 3405:		    bb_edge_new->xmin = 1;
        -: 3406:		}
        -: 3407:
   763335: 3408:	    else if(xnew == bb_coords[inet].xmin)
branch  0 taken 30% (fallthrough)
branch  1 taken 70%
        -: 3409:		{		/* Moved to xmin */
   225676: 3410:		    bb_coord_new->xmin = xnew;
   225676: 3411:		    bb_edge_new->xmin = bb_num_on_edges[inet].xmin + 1;
        -: 3412:		}
        -: 3413:
        -: 3414:	    else
        -: 3415:		{		/* Xmin unchanged. */
   537659: 3416:		    bb_coord_new->xmin = bb_coords[inet].xmin;
   537659: 3417:		    bb_edge_new->xmin = bb_num_on_edges[inet].xmin;
        -: 3418:		}
        -: 3419:	}
        -: 3420:
        -: 3421:    /* End of move to left case. */
  2008503: 3422:    else if(xnew > xold)
branch  0 taken 65% (fallthrough)
branch  1 taken 35%
        -: 3423:	{			/* Move to right. */
        -: 3424:
        -: 3425:	    /* Update the xmin fields for coordinates and number of edges first. */
        -: 3426:
  1298462: 3427:	    if(xold == bb_coords[inet].xmin)
branch  0 taken 30% (fallthrough)
branch  1 taken 70%
        -: 3428:		{		/* Old position at xmin. */
   392912: 3429:		    if(bb_num_on_edges[inet].xmin == 1)
branch  0 taken 15% (fallthrough)
branch  1 taken 85%
        -: 3430:			{
    60564: 3431:			    get_bb_from_scratch(inet, bb_coord_new,
call    0 returned 100%
        -: 3432:						bb_edge_new);
    60564: 3433:			    return;
        -: 3434:			}
        -: 3435:		    else
        -: 3436:			{
   332348: 3437:			    bb_edge_new->xmin =
   332348: 3438:				bb_num_on_edges[inet].xmin - 1;
   332348: 3439:			    bb_coord_new->xmin = bb_coords[inet].xmin;
        -: 3440:			}
        -: 3441:		}
        -: 3442:
        -: 3443:	    else
        -: 3444:		{		/* Move to right, old position was not at xmin. */
   905550: 3445:		    bb_coord_new->xmin = bb_coords[inet].xmin;
   905550: 3446:		    bb_edge_new->xmin = bb_num_on_edges[inet].xmin;
        -: 3447:		}
        -: 3448:
        -: 3449:	    /* Now do the xmax fields for coordinates and number of edges. */
        -: 3450:
  1237898: 3451:	    if(xnew > bb_coords[inet].xmax)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
        -: 3452:		{		/* Moved past xmax. */
   332512: 3453:		    bb_coord_new->xmax = xnew;
   332512: 3454:		    bb_edge_new->xmax = 1;
        -: 3455:		}
        -: 3456:
   905386: 3457:	    else if(xnew == bb_coords[inet].xmax)
branch  0 taken 36% (fallthrough)
branch  1 taken 64%
        -: 3458:		{		/* Moved to xmax */
   328018: 3459:		    bb_coord_new->xmax = xnew;
   328018: 3460:		    bb_edge_new->xmax = bb_num_on_edges[inet].xmax + 1;
        -: 3461:		}
        -: 3462:
        -: 3463:	    else
        -: 3464:		{		/* Xmax unchanged. */
   577368: 3465:		    bb_coord_new->xmax = bb_coords[inet].xmax;
   577368: 3466:		    bb_edge_new->xmax = bb_num_on_edges[inet].xmax;
        -: 3467:		}
        -: 3468:	}
        -: 3469:    /* End of move to right case. */
        -: 3470:    else
        -: 3471:	{			/* xnew == xold -- no x motion. */
   710041: 3472:	    bb_coord_new->xmin = bb_coords[inet].xmin;
   710041: 3473:	    bb_coord_new->xmax = bb_coords[inet].xmax;
   710041: 3474:	    bb_edge_new->xmin = bb_num_on_edges[inet].xmin;
   710041: 3475:	    bb_edge_new->xmax = bb_num_on_edges[inet].xmax;
        -: 3476:	}
        -: 3477:
        -: 3478:    /* Now account for the y-direction motion. */
        -: 3479:
  2863783: 3480:    if(ynew < yold)
branch  0 taken 48% (fallthrough)
branch  1 taken 52%
        -: 3481:	{			/* Move down. */
        -: 3482:
        -: 3483:	    /* Update the ymax fields for coordinates and number of edges first. */
        -: 3484:
  1365660: 3485:	    if(yold == bb_coords[inet].ymax)
branch  0 taken 18% (fallthrough)
branch  1 taken 82%
        -: 3486:		{		/* Old position at ymax. */
   243630: 3487:		    if(bb_num_on_edges[inet].ymax == 1)
branch  0 taken 29% (fallthrough)
branch  1 taken 71%
        -: 3488:			{
    69462: 3489:			    get_bb_from_scratch(inet, bb_coord_new,
call    0 returned 100%
        -: 3490:						bb_edge_new);
    69462: 3491:			    return;
        -: 3492:			}
        -: 3493:		    else
        -: 3494:			{
   174168: 3495:			    bb_edge_new->ymax =
   174168: 3496:				bb_num_on_edges[inet].ymax - 1;
   174168: 3497:			    bb_coord_new->ymax = bb_coords[inet].ymax;
        -: 3498:			}
        -: 3499:		}
        -: 3500:
        -: 3501:	    else
        -: 3502:		{		/* Move down, old postion was not at ymax. */
  1122030: 3503:		    bb_coord_new->ymax = bb_coords[inet].ymax;
  1122030: 3504:		    bb_edge_new->ymax = bb_num_on_edges[inet].ymax;
        -: 3505:		}
        -: 3506:
        -: 3507:	    /* Now do the ymin fields for coordinates and number of edges. */
        -: 3508:
  1296198: 3509:	    if(ynew < bb_coords[inet].ymin)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
        -: 3510:		{		/* Moved past ymin */
   345226: 3511:		    bb_coord_new->ymin = ynew;
   345226: 3512:		    bb_edge_new->ymin = 1;
        -: 3513:		}
        -: 3514:
   950972: 3515:	    else if(ynew == bb_coords[inet].ymin)
branch  0 taken 21% (fallthrough)
branch  1 taken 79%
        -: 3516:		{		/* Moved to ymin */
   202631: 3517:		    bb_coord_new->ymin = ynew;
   202631: 3518:		    bb_edge_new->ymin = bb_num_on_edges[inet].ymin + 1;
        -: 3519:		}
        -: 3520:
        -: 3521:	    else
        -: 3522:		{		/* ymin unchanged. */
   748341: 3523:		    bb_coord_new->ymin = bb_coords[inet].ymin;
   748341: 3524:		    bb_edge_new->ymin = bb_num_on_edges[inet].ymin;
        -: 3525:		}
        -: 3526:	}
        -: 3527:    /* End of move down case. */
  1498123: 3528:    else if(ynew > yold)
branch  0 taken 72% (fallthrough)
branch  1 taken 28%
        -: 3529:	{			/* Moved up. */
        -: 3530:
        -: 3531:	    /* Update the ymin fields for coordinates and number of edges first. */
        -: 3532:
  1075263: 3533:	    if(yold == bb_coords[inet].ymin)
branch  0 taken 28% (fallthrough)
branch  1 taken 72%
        -: 3534:		{		/* Old position at ymin. */
   299787: 3535:		    if(bb_num_on_edges[inet].ymin == 1)
branch  0 taken 34% (fallthrough)
branch  1 taken 66%
        -: 3536:			{
   101438: 3537:			    get_bb_from_scratch(inet, bb_coord_new,
call    0 returned 100%
        -: 3538:						bb_edge_new);
   101438: 3539:			    return;
        -: 3540:			}
        -: 3541:		    else
        -: 3542:			{
   198349: 3543:			    bb_edge_new->ymin =
   198349: 3544:				bb_num_on_edges[inet].ymin - 1;
   198349: 3545:			    bb_coord_new->ymin = bb_coords[inet].ymin;
        -: 3546:			}
        -: 3547:		}
        -: 3548:
        -: 3549:	    else
        -: 3550:		{		/* Moved up, old position was not at ymin. */
   775476: 3551:		    bb_coord_new->ymin = bb_coords[inet].ymin;
   775476: 3552:		    bb_edge_new->ymin = bb_num_on_edges[inet].ymin;
        -: 3553:		}
        -: 3554:
        -: 3555:	    /* Now do the ymax fields for coordinates and number of edges. */
        -: 3556:
   973825: 3557:	    if(ynew > bb_coords[inet].ymax)
branch  0 taken 15% (fallthrough)
branch  1 taken 85%
        -: 3558:		{		/* Moved past ymax. */
   141617: 3559:		    bb_coord_new->ymax = ynew;
   141617: 3560:		    bb_edge_new->ymax = 1;
        -: 3561:		}
        -: 3562:
   832208: 3563:	    else if(ynew == bb_coords[inet].ymax)
branch  0 taken 16% (fallthrough)
branch  1 taken 84%
        -: 3564:		{		/* Moved to ymax */
   129819: 3565:		    bb_coord_new->ymax = ynew;
   129819: 3566:		    bb_edge_new->ymax = bb_num_on_edges[inet].ymax + 1;
        -: 3567:		}
        -: 3568:
        -: 3569:	    else
        -: 3570:		{		/* ymax unchanged. */
   702389: 3571:		    bb_coord_new->ymax = bb_coords[inet].ymax;
   702389: 3572:		    bb_edge_new->ymax = bb_num_on_edges[inet].ymax;
        -: 3573:		}
        -: 3574:	}
        -: 3575:    /* End of move up case. */
        -: 3576:    else
        -: 3577:	{			/* ynew == yold -- no y motion. */
   422860: 3578:	    bb_coord_new->ymin = bb_coords[inet].ymin;
   422860: 3579:	    bb_coord_new->ymax = bb_coords[inet].ymax;
   422860: 3580:	    bb_edge_new->ymin = bb_num_on_edges[inet].ymin;
   422860: 3581:	    bb_edge_new->ymax = bb_num_on_edges[inet].ymax;
        -: 3582:	}
        -: 3583:}
        -: 3584:
        -: 3585:
        -: 3586:static void
function initial_placement called 1 returned 100% blocks executed 95%
        1: 3587:initial_placement(enum e_pad_loc_type pad_loc_type,
        -: 3588:		  char *pad_loc_file)
        -: 3589:{
        -: 3590:
        -: 3591:    /* Randomly places the blocks to create an initial placement.     */
        -: 3592:    struct s_pos
        -: 3593:    {
        -: 3594:	int x;
        -: 3595:	int y;
        -: 3596:	int z;
        -: 3597:    }
        -: 3598:    **pos;			/* [0..num_types-1][0..type_tsize - 1] */
        -: 3599:    int i, j, k, iblk, choice, type_index, x, y, z;
        -: 3600:    int *count, *index;		/* [0..num_types-1] */
        -: 3601:
        1: 3602:    pos = (struct s_pos **)my_malloc(num_types * sizeof(struct s_pos *));
call    0 returned 100%
        1: 3603:    count = (int *)my_calloc(num_types, sizeof(int));
call    0 returned 100%
        1: 3604:    index = (int *)my_calloc(num_types, sizeof(int));
call    0 returned 100%
        -: 3605:
        -: 3606:    /* Initialize all occupancy to zero. */
        -: 3607:
       13: 3608:    for(i = 0; i <= nx + 1; i++)
branch  0 taken 92%
branch  1 taken 8% (fallthrough)
        -: 3609:	{
      156: 3610:	    for(j = 0; j <= ny + 1; j++)
branch  0 taken 92%
branch  1 taken 8% (fallthrough)
        -: 3611:		{
      144: 3612:		    grid[i][j].usage = 0;
      361: 3613:		    for(k = 0; k < grid[i][j].type->capacity; k++)
branch  0 taken 60%
branch  1 taken 40% (fallthrough)
        -: 3614:			{
      217: 3615:			    grid[i][j].blocks[k] = EMPTY;
      217: 3616:			    if(grid[i][j].offset == 0)
branch  0 taken 92% (fallthrough)
branch  1 taken 8%
        -: 3617:				{
      199: 3618:				    count[grid[i][j].type->index]++;
        -: 3619:				}
        -: 3620:			}
        -: 3621:		}
        -: 3622:	}
        -: 3623:
        5: 3624:    for(i = 0; i < num_types; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -: 3625:	{
        8: 3626:	    pos[i] =
        4: 3627:		(struct s_pos *)my_malloc(count[i] * sizeof(struct s_pos));
call    0 returned 100%
        -: 3628:	}
        -: 3629:
       13: 3630:    for(i = 0; i <= nx + 1; i++)
branch  0 taken 92%
branch  1 taken 8% (fallthrough)
        -: 3631:	{
      156: 3632:	    for(j = 0; j <= ny + 1; j++)
branch  0 taken 92%
branch  1 taken 8% (fallthrough)
        -: 3633:		{
      361: 3634:		    for(k = 0; k < grid[i][j].type->capacity; k++)
branch  0 taken 60%
branch  1 taken 40% (fallthrough)
        -: 3635:			{
      217: 3636:			    if(grid[i][j].offset == 0)
branch  0 taken 92% (fallthrough)
branch  1 taken 8%
        -: 3637:				{
      199: 3638:				    type_index = grid[i][j].type->index;
      199: 3639:				    pos[type_index][index[type_index]].x = i;
      199: 3640:				    pos[type_index][index[type_index]].y = j;
      199: 3641:				    pos[type_index][index[type_index]].z = k;
      199: 3642:				    index[type_index]++;
        -: 3643:				}
        -: 3644:			}
        -: 3645:		}
        -: 3646:	}
        -: 3647:
      139: 3648:    for(iblk = 0; iblk < num_blocks; iblk++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -: 3649:	{
        -: 3650:	    /* Don't do IOs if the user specifies IOs */
      138: 3651:	    if(!(block[iblk].type == IO_TYPE && pad_loc_type == USER))
branch  0 taken 46% (fallthrough)
branch  1 taken 54%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        -: 3652:		{
      138: 3653:		    type_index = block[iblk].type->index;
      138: 3654:		    assert(count[type_index] > 0);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
      138: 3655:		    choice = my_irand(count[type_index] - 1);
call    0 returned 100%
      138: 3656:		    x = pos[type_index][choice].x;
      138: 3657:		    y = pos[type_index][choice].y;
      138: 3658:		    z = pos[type_index][choice].z;
      138: 3659:		    grid[x][y].blocks[z] = iblk;
      138: 3660:		    grid[x][y].usage++;
        -: 3661:
        -: 3662:		    /* Ensure randomizer doesn't pick this block again */
      138: 3663:		    pos[type_index][choice] = pos[type_index][count[type_index] - 1];	/* overwrite used block position */
      138: 3664:		    count[type_index]--;
        -: 3665:		}
        -: 3666:	}
        -: 3667:
        1: 3668:    if(pad_loc_type == USER)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 3669:	{
    #####: 3670:	    read_user_pad_loc(pad_loc_file);
call    0 never executed
        -: 3671:	}
        -: 3672:
        -: 3673:    /* All the blocks are placed now.  Make the block array agree with the    *
        -: 3674:     * clb array.                                                             */
        -: 3675:
       13: 3676:    for(i = 0; i <= (nx + 1); i++)
branch  0 taken 92%
branch  1 taken 8% (fallthrough)
        -: 3677:	{
      156: 3678:	    for(j = 0; j <= (ny + 1); j++)
branch  0 taken 92%
branch  1 taken 8% (fallthrough)
        -: 3679:		{
      361: 3680:		    for(k = 0; k < grid[i][j].type->capacity; k++)
branch  0 taken 60%
branch  1 taken 40% (fallthrough)
        -: 3681:			{
      217: 3682:			    assert(grid[i][j].blocks != NULL);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
      217: 3683:			    iblk = grid[i][j].blocks[k];
        -: 3684:
      217: 3685:			    if(iblk != EMPTY)
branch  0 taken 64% (fallthrough)
branch  1 taken 36%
        -: 3686:				{
      138: 3687:				    block[iblk].x = i;
      138: 3688:				    block[iblk].y = j;
      138: 3689:				    block[iblk].z = k;
        -: 3690:				}
        -: 3691:			}
        -: 3692:		}
        -: 3693:	}
        -: 3694:
        -: 3695:#ifdef VERBOSE
        -: 3696:    printf("At end of initial_placement.\n");
        -: 3697:    dump_clbs();
        -: 3698:#endif
        5: 3699:    for(i = 0; i < num_types; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -: 3700:	{
        4: 3701:	    free(pos[i]);
        -: 3702:	}
        1: 3703:    free(pos);			/* Free the mapping list */
        1: 3704:    free(index);
        1: 3705:    free(count);
        1: 3706:}
        -: 3707:
        -: 3708:
        -: 3709:static void
function free_fast_cost_update_structs called 1 returned 100% blocks executed 100%
        1: 3710:free_fast_cost_update_structs(void)
        -: 3711:{
        -: 3712:
        -: 3713:    /* Frees the structures used to speed up evaluation of the nonlinear   *
        -: 3714:     * congestion cost function.                                           */
        -: 3715:
        -: 3716:    int i;
        -: 3717:
       12: 3718:    for(i = 0; i <= ny; i++)
branch  0 taken 92%
branch  1 taken 8% (fallthrough)
       11: 3719:	free(chanx_place_cost_fac[i]);
        -: 3720:
        1: 3721:    free(chanx_place_cost_fac);
        -: 3722:
       12: 3723:    for(i = 0; i <= nx; i++)
branch  0 taken 92%
branch  1 taken 8% (fallthrough)
       11: 3724:	free(chany_place_cost_fac[i]);
        -: 3725:
        1: 3726:    free(chany_place_cost_fac);
        1: 3727:}
        -: 3728:
        -: 3729:
        -: 3730:static void
function alloc_and_load_for_fast_cost_update called 1 returned 100% blocks executed 100%
        1: 3731:alloc_and_load_for_fast_cost_update(float place_cost_exp)
        -: 3732:{
        -: 3733:
        -: 3734:    /* Allocates and loads the chanx_place_cost_fac and chany_place_cost_fac *
        -: 3735:     * arrays with the inverse of the average number of tracks per channel   *
        -: 3736:     * between [subhigh] and [sublow].  This is only useful for the cost     *
        -: 3737:     * function that takes the length of the net bounding box in each        *
        -: 3738:     * dimension divided by the average number of tracks in that direction.  *
        -: 3739:     * For other cost functions, you don't have to bother calling this       *
        -: 3740:     * routine; when using the cost function described above, however, you   *
        -: 3741:     * must always call this routine after you call init_chan and before     *
        -: 3742:     * you do any placement cost determination.  The place_cost_exp factor   *
        -: 3743:     * specifies to what power the width of the channel should be taken --   *
        -: 3744:     * larger numbers make narrower channels more expensive.                 */
        -: 3745:
        -: 3746:    int low, high, i;
        -: 3747:
        -: 3748:    /* Access arrays below as chan?_place_cost_fac[subhigh][sublow].  Since   *
        -: 3749:     * subhigh must be greater than or equal to sublow, we only need to       *
        -: 3750:     * allocate storage for the lower half of a matrix.                       */
        -: 3751:
        1: 3752:    chanx_place_cost_fac = (float **)my_malloc((ny + 1) * sizeof(float *));
call    0 returned 100%
       12: 3753:    for(i = 0; i <= ny; i++)
branch  0 taken 92%
branch  1 taken 8% (fallthrough)
       11: 3754:	chanx_place_cost_fac[i] = (float *)my_malloc((i + 1) * sizeof(float));
call    0 returned 100%
        -: 3755:
        1: 3756:    chany_place_cost_fac = (float **)my_malloc((nx + 1) * sizeof(float *));
call    0 returned 100%
       12: 3757:    for(i = 0; i <= nx; i++)
branch  0 taken 92%
branch  1 taken 8% (fallthrough)
       11: 3758:	chany_place_cost_fac[i] = (float *)my_malloc((i + 1) * sizeof(float));
call    0 returned 100%
        -: 3759:
        -: 3760:
        -: 3761:    /* First compute the number of tracks between channel high and channel *
        -: 3762:     * low, inclusive, in an efficient manner.                             */
        -: 3763:
        1: 3764:    chanx_place_cost_fac[0][0] = chan_width_x[0];
        -: 3765:
       11: 3766:    for(high = 1; high <= ny; high++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -: 3767:	{
       10: 3768:	    chanx_place_cost_fac[high][high] = chan_width_x[high];
       65: 3769:	    for(low = 0; low < high; low++)
branch  0 taken 85%
branch  1 taken 15% (fallthrough)
        -: 3770:		{
      110: 3771:		    chanx_place_cost_fac[high][low] =
      110: 3772:			chanx_place_cost_fac[high - 1][low] +
       55: 3773:			chan_width_x[high];
        -: 3774:		}
        -: 3775:	}
        -: 3776:
        -: 3777:    /* Now compute the inverse of the average number of tracks per channel *
        -: 3778:     * between high and low.  The cost function divides by the average     *
        -: 3779:     * number of tracks per channel, so by storing the inverse I convert   *
        -: 3780:     * this to a faster multiplication.  Take this final number to the     *
        -: 3781:     * place_cost_exp power -- numbers other than one mean this is no      *
        -: 3782:     * longer a simple "average number of tracks"; it is some power of     *
        -: 3783:     * that, allowing greater penalization of narrow channels.             */
        -: 3784:
       12: 3785:    for(high = 0; high <= ny; high++)
branch  0 taken 92%
branch  1 taken 8% (fallthrough)
       77: 3786:	for(low = 0; low <= high; low++)
branch  0 taken 86%
branch  1 taken 14% (fallthrough)
        -: 3787:	    {
      132: 3788:		chanx_place_cost_fac[high][low] = (high - low + 1.) /
       66: 3789:		    chanx_place_cost_fac[high][low];
      132: 3790:		chanx_place_cost_fac[high][low] =
       66: 3791:		    pow((double)chanx_place_cost_fac[high][low],
        -: 3792:			(double)place_cost_exp);
        -: 3793:	    }
        -: 3794:
        -: 3795:
        -: 3796:    /* Now do the same thing for the y-directed channels.  First get the  *
        -: 3797:     * number of tracks between channel high and channel low, inclusive.  */
        -: 3798:
        1: 3799:    chany_place_cost_fac[0][0] = chan_width_y[0];
        -: 3800:
       11: 3801:    for(high = 1; high <= nx; high++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -: 3802:	{
       10: 3803:	    chany_place_cost_fac[high][high] = chan_width_y[high];
       65: 3804:	    for(low = 0; low < high; low++)
branch  0 taken 85%
branch  1 taken 15% (fallthrough)
        -: 3805:		{
      110: 3806:		    chany_place_cost_fac[high][low] =
      110: 3807:			chany_place_cost_fac[high - 1][low] +
       55: 3808:			chan_width_y[high];
        -: 3809:		}
        -: 3810:	}
        -: 3811:
        -: 3812:    /* Now compute the inverse of the average number of tracks per channel * 
        -: 3813:     * between high and low.  Take to specified power.                     */
        -: 3814:
       12: 3815:    for(high = 0; high <= nx; high++)
branch  0 taken 92%
branch  1 taken 8% (fallthrough)
       77: 3816:	for(low = 0; low <= high; low++)
branch  0 taken 86%
branch  1 taken 14% (fallthrough)
        -: 3817:	    {
      132: 3818:		chany_place_cost_fac[high][low] = (high - low + 1.) /
       66: 3819:		    chany_place_cost_fac[high][low];
      132: 3820:		chany_place_cost_fac[high][low] =
       66: 3821:		    pow((double)chany_place_cost_fac[high][low],
        -: 3822:			(double)place_cost_exp);
        -: 3823:	    }
        1: 3824:}
        -: 3825:
        -: 3826:
        -: 3827:static void
function check_place called 1 returned 100% blocks executed 70%
        1: 3828:check_place(float bb_cost,
        -: 3829:	    float timing_cost,
        -: 3830:	    int place_cost_type,
        -: 3831:	    int num_regions,
        -: 3832:	    enum e_place_algorithm place_algorithm,
        -: 3833:	    float delay_cost)
        -: 3834:{
        -: 3835:
        -: 3836:    /* Checks that the placement has not confused our data structures. *
        -: 3837:     * i.e. the clb and block structures agree about the locations of  *
        -: 3838:     * every block, blocks are in legal spots, etc.  Also recomputes   *
        -: 3839:     * the final placement cost from scratch and makes sure it is      *
        -: 3840:     * within roundoff of what we think the cost is.                   */
        -: 3841:
        -: 3842:    static int *bdone;
        1: 3843:    int i, j, k, error = 0, bnum;
        -: 3844:    float bb_cost_check;
        -: 3845:    int usage_check;
        -: 3846:    float timing_cost_check, delay_cost_check;
        -: 3847:
        1: 3848:    bb_cost_check = comp_bb_cost(CHECK, place_cost_type, num_regions);
call    0 returned 100%
        1: 3849:    printf("bb_cost recomputed from scratch is %g.\n", bb_cost_check);
call    0 returned 100%
        1: 3850:    if(fabs(bb_cost_check - bb_cost) > bb_cost * ERROR_TOL)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 3851:	{
    #####: 3852:	    printf
call    0 never executed
        -: 3853:		("Error:  bb_cost_check: %g and bb_cost: %g differ in check_place.\n",
        -: 3854:		 bb_cost_check, bb_cost);
    #####: 3855:	    error++;
        -: 3856:	}
        -: 3857:
        1: 3858:    if(place_algorithm == NET_TIMING_DRIVEN_PLACE ||
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        -: 3859:       place_algorithm == PATH_TIMING_DRIVEN_PLACE)
        -: 3860:	{
        1: 3861:	    comp_td_costs(&timing_cost_check, &delay_cost_check);
call    0 returned 100%
        1: 3862:	    printf("timing_cost recomputed from scratch is %g. \n",
call    0 returned 100%
        -: 3863:		   timing_cost_check);
        2: 3864:	    if(fabs(timing_cost_check - timing_cost) >
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        1: 3865:	       timing_cost * ERROR_TOL)
        -: 3866:		{
    #####: 3867:		    printf("Error:  timing_cost_check: %g and timing_cost: "
call    0 never executed
        -: 3868:			   "%g differ in check_place.\n",
        -: 3869:			   timing_cost_check, timing_cost);
    #####: 3870:		    error++;
        -: 3871:		}
        1: 3872:	    printf("delay_cost recomputed from scratch is %g. \n",
call    0 returned 100%
        -: 3873:		   delay_cost_check);
        1: 3874:	    if(fabs(delay_cost_check - delay_cost) > delay_cost * ERROR_TOL)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 3875:		{
    #####: 3876:		    printf("Error:  delay_cost_check: %g and delay_cost: "
call    0 never executed
        -: 3877:			   "%g differ in check_place.\n",
        -: 3878:			   delay_cost_check, delay_cost);
    #####: 3879:		    error++;
        -: 3880:		}
        -: 3881:	}
        -: 3882:
        1: 3883:    bdone = (int *)my_malloc(num_blocks * sizeof(int));
call    0 returned 100%
      139: 3884:    for(i = 0; i < num_blocks; i++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
      138: 3885:	bdone[i] = 0;
        -: 3886:
        -: 3887:    /* Step through grid array. Check it against block array. */
       13: 3888:    for(i = 0; i <= (nx + 1); i++)
branch  0 taken 92%
branch  1 taken 8% (fallthrough)
      156: 3889:	for(j = 0; j <= (ny + 1); j++)
branch  0 taken 92%
branch  1 taken 8% (fallthrough)
        -: 3890:	    {
      144: 3891:		if(grid[i][j].usage > grid[i][j].type->capacity)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 3892:		    {
    #####: 3893:			printf
call    0 never executed
        -: 3894:			    ("Error:  block at grid location (%d,%d) overused. "
    #####: 3895:			     "Usage is %d\n", i, j, grid[i][j].usage);
    #####: 3896:			error++;
        -: 3897:		    }
      144: 3898:		usage_check = 0;
      361: 3899:		for(k = 0; k < grid[i][j].type->capacity; k++)
branch  0 taken 60%
branch  1 taken 40% (fallthrough)
        -: 3900:		    {
      217: 3901:			bnum = grid[i][j].blocks[k];
      217: 3902:			if(EMPTY == bnum)
branch  0 taken 36% (fallthrough)
branch  1 taken 64%
       79: 3903:			    continue;
        -: 3904:
      138: 3905:			if(block[bnum].type != grid[i][j].type)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 3906:			    {
    #####: 3907:				printf
call    0 never executed
        -: 3908:				    ("Error:  block %d type does not match grid location (%d,%d) type.\n",
        -: 3909:				     bnum, i, j);
    #####: 3910:				error++;
        -: 3911:			    }
      138: 3912:			if((block[bnum].x != i) || (block[bnum].y != j))
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -: 3913:			    {
    #####: 3914:				printf
call    0 never executed
        -: 3915:				    ("Error:  block %d location conflicts with grid(%d,%d)"
        -: 3916:				     "data.\n", bnum, i, j);
    #####: 3917:				error++;
        -: 3918:			    }
      138: 3919:			++usage_check;
      138: 3920:			bdone[bnum]++;
        -: 3921:		    }
      144: 3922:		if(usage_check != grid[i][j].usage)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 3923:		    {
    #####: 3924:			printf
call    0 never executed
        -: 3925:			    ("Error:  Location (%d,%d) usage is %d, but has actual usage %d.\n",
    #####: 3926:			     i, j, grid[i][j].usage, usage_check);
        -: 3927:		    }
        -: 3928:	    }
        -: 3929:
        -: 3930:    /* Check that every block exists in the grid and block arrays somewhere. */
      139: 3931:    for(i = 0; i < num_blocks; i++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
      138: 3932:	if(bdone[i] != 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 3933:	    {
    #####: 3934:		printf
call    0 never executed
        -: 3935:		    ("Error:  block %d listed %d times in data structures.\n",
    #####: 3936:		     i, bdone[i]);
    #####: 3937:		error++;
        -: 3938:	    }
        1: 3939:    free(bdone);
        -: 3940:
        1: 3941:    if(error == 0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 3942:	{
        1: 3943:	    printf
call    0 returned 100%
        -: 3944:		("\nCompleted placement consistency check successfully.\n\n");
        -: 3945:#ifdef PRINT_REL_POS_DISTR
        -: 3946:	    print_relative_pos_distr();
        -: 3947:#endif
        -: 3948:	}
        -: 3949:    else
        -: 3950:	{
    #####: 3951:	    printf
call    0 never executed
        -: 3952:		("\nCompleted placement consistency check, %d Errors found.\n\n",
        -: 3953:		 error);
    #####: 3954:	    printf("Aborting program.\n");
call    0 never executed
    #####: 3955:	    exit(1);
        -: 3956:	}
        1: 3957:}
